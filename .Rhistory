GammaP) %>%
collect() %>%
# mutate(my_col_name = GammaP*2) %>% you can do cool stuff with mutate
mutate(rhythmic = ifelse(GammaP < 0.05, "yes", "no")) %>%
select(-GammaP) %>%
left_join(gene.IDs, by = c('gene_ID_NCBI' = "attributes_ncbi")) %>%
select(-c(start,end))
# Make the table in the database
dbWriteTable(my.db, name, rhytmic)
src_dbi(my.db)
dbReadTable(my.db, 'beau_rhytmic_genes_12h')
src_dbi(my.db)
dbRemoveTable(my.db, 'beau_rhytmic_genes_12h')
dbRemoveTable(my.db, 'beau_rhytmic_genes_24h')
dbRemoveTable(my.db, 'ophio_cflo_rhytmic_genes_24h')
dbRemoveTable(my.db, 'ophio_cflo_rhytmic_genes_12h')
src_dbi(my.db)
# Rhytmic or not ----------------------------------------------------------
# tbl(my.db, “tbl_name”) %>% collect() %>% view() for viewing table
#
### Write table with all the gene ID's in it and say if it is rhytmic or not
period <- '24'
# path to file with all the gene IDs
csv.name <- paste0('./data/input/', species, '/', species, '_gene_names_robin_ncbi.csv')
# name of the new table in the database
name <- glue('{species}_rhythmic_genes_{period}h')
# read in the gene IDs
gene.IDs <- read.csv(csv.name, sep= ',', header = TRUE, stringsAsFactors = FALSE)
rhytmic <-
my.db %>%
tbl(glue("{species}_zscores_{period}h")) %>%
select(gene_ID_NCBI = ID,
GammaP) %>%
collect() %>%
# mutate(my_col_name = GammaP*2) %>% you can do cool stuff with mutate
mutate(rhythmic = ifelse(GammaP < 0.05, "yes", "no")) %>%
select(-GammaP) %>%
left_join(gene.IDs, by = c('gene_ID_NCBI' = "attributes_ncbi")) %>%
select(-c(start,end))
# Make the table in the database
dbWriteTable(my.db, name, rhytmic)
# Rhytmic or not ----------------------------------------------------------
# tbl(my.db, “tbl_name”) %>% collect() %>% view() for viewing table
#
### Write table with all the gene ID's in it and say if it is rhytmic or not
period <- '12'
# path to file with all the gene IDs
csv.name <- paste0('./data/input/', species, '/', species, '_gene_names_robin_ncbi.csv')
# name of the new table in the database
name <- glue('{species}_rhythmic_genes_{period}h')
# read in the gene IDs
gene.IDs <- read.csv(csv.name, sep= ',', header = TRUE, stringsAsFactors = FALSE)
rhytmic <-
my.db %>%
tbl(glue("{species}_zscores_{period}h")) %>%
select(gene_ID_NCBI = ID,
GammaP) %>%
collect() %>%
# mutate(my_col_name = GammaP*2) %>% you can do cool stuff with mutate
mutate(rhythmic = ifelse(GammaP < 0.05, "yes", "no")) %>%
select(-GammaP) %>%
left_join(gene.IDs, by = c('gene_ID_NCBI' = "attributes_ncbi")) %>%
select(-c(start,end))
# Make the table in the database
dbWriteTable(my.db, name, rhytmic)
#
# Choose species
species <- 'beau'
# Rhytmic or not ----------------------------------------------------------
# tbl(my.db, “tbl_name”) %>% collect() %>% view() for viewing table
#
### Write table with all the gene ID's in it and say if it is rhytmic or not
period <- '12'
# path to file with all the gene IDs
csv.name <- paste0('./data/input/', species, '/', species, '_gene_names_robin_ncbi.csv')
# name of the new table in the database
name <- glue('{species}_rhythmic_genes_{period}h')
# read in the gene IDs
gene.IDs <- read.csv(csv.name, sep= ',', header = TRUE, stringsAsFactors = FALSE)
rhytmic <-
my.db %>%
tbl(glue("{species}_zscores_{period}h")) %>%
select(gene_ID_NCBI = ID,
GammaP) %>%
collect() %>%
# mutate(my_col_name = GammaP*2) %>% you can do cool stuff with mutate
mutate(rhythmic = ifelse(GammaP < 0.05, "yes", "no")) %>%
select(-GammaP) %>%
left_join(gene.IDs, by = c('gene_ID_NCBI' = "attributes_ncbi")) %>%
select(-c(start,end))
# Make the table in the database
dbWriteTable(my.db, name, rhytmic)
# Rhytmic or not ----------------------------------------------------------
# tbl(my.db, “tbl_name”) %>% collect() %>% view() for viewing table
#
### Write table with all the gene ID's in it and say if it is rhytmic or not
period <- '24'
# path to file with all the gene IDs
csv.name <- paste0('./data/input/', species, '/', species, '_gene_names_robin_ncbi.csv')
# name of the new table in the database
name <- glue('{species}_rhythmic_genes_{period}h')
# read in the gene IDs
gene.IDs <- read.csv(csv.name, sep= ',', header = TRUE, stringsAsFactors = FALSE)
rhytmic <-
my.db %>%
tbl(glue("{species}_zscores_{period}h")) %>%
select(gene_ID_NCBI = ID,
GammaP) %>%
collect() %>%
# mutate(my_col_name = GammaP*2) %>% you can do cool stuff with mutate
mutate(rhythmic = ifelse(GammaP < 0.05, "yes", "no")) %>%
select(-GammaP) %>%
left_join(gene.IDs, by = c('gene_ID_NCBI' = "attributes_ncbi")) %>%
select(-c(start,end))
# Make the table in the database
dbWriteTable(my.db, name, rhytmic)
src_dbi(my.db)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# h. ophio_kim_DD_zscores
# i. ophio_kim_expressed_genes
# j. ophio_kim_fpkm
# k. ophio_kim_log2fpkm
# l. ophio_kim_zscores
# m. beau_expressed_genes
# n. beau_fpkm
# o. beau_log2fpkm
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
tbl(my.db, "beau_fpkm") %>% collect() %>% view()
install.packages(c("ape", "geiger", "phytools", "Rphylopars"))
# load the trait data
dat <- as.data.frame(read_excel("/Users/roos_brouns/Downloads/10122021.xlsx"))
dat <- data.frame(dat)
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
# load the trait data
dat <- as.data.frame(read_excel("/Users/roos_brouns/Downloads/10122021.xlsx"))
install.packages("readxl")
install.packages("readxl")
# load the trait data
dat <- as.data.frame(read_excel("/Users/roos_brouns/Downloads/10122021.xlsx"))
library(tidyverse)
# load the trait data
dat <- as.data.frame(read_excel("/Users/roos_brouns/Downloads/10122021.xlsx"))
getwd()
setwd("~/Downloads")
# load the trait data
dat <- as.data.frame(read_excel("/Users/roos_brouns/Downloads/10122021.xlsx"))
# load the trait data
Dataset <- read.xlsx("/Users/roos_brouns/Downloads/10122021.xlsx")
########## TC6 Fungal Database ############
#
# This script is written to create a databse containing all the data of a 24h time-course experiment
#
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages --
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
setwd("~/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a")
########## TC6 Fungal Database ############
#
# This script is written to create a databse containing all the data of a 24h time-course experiment
#
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages --
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds
#
# Specify your path
path <- "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a/"
#0. Create the database
my.db <- dbConnect(RSQLite::SQLite(),
glue("{path}/data/databases/new_TC6_fungal_data.db"))
# 1. FPKM table  ----------------------------------------------------------
#
# Load in the data
beau <- read.csv(glue("{path}/results/normalized_gene_exp/raw_fpkm/{species}/normalized_gene_exp_{species}_all_samples.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
#
# Specify species
species <- 'beau'
# 1. FPKM table  ----------------------------------------------------------
#
# Load in the data
beau <- read.csv(glue("{path}/results/normalized_gene_exp/raw_fpkm/{species}/normalized_gene_exp_{species}_all_samples.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# Join the data
left_join(gene.IDs, data, by = 'gene_ID_ncbi')
# also make a colum for the gene ID's from Robin
#
# Load in the gene IDs
gene.IDs <- read.csv(glue("{path}/data/input/{species}/{species}_gene_names_robin_ncbi.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# Join the data
left_join(gene.IDs, data, by = 'gene_ID_ncbi')
# Join the data
left_join(gene.IDs, data, by = c('gene_ID_ncbi' = 'gene_ID_ncbi'))
# Join the data
left_join(data, gene.IDs, by = c('gene_ID_ncbi' = 'gene_ID_ncbi'))
# Join the data
left_join(data, gene.IDs, by = c('gene_ID_ncbi','gene_ID_ncbi'))
# 1. FPKM table  ----------------------------------------------------------
#
# Load in the expression data
data <- read.csv(glue("{path}/results/normalized_gene_exp/raw_fpkm/{species}/normalized_gene_exp_{species}_all_samples.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# also make a colum for the gene ID's from Robin
#
# Load in the gene IDs
gene.IDs <- read.csv(glue("{path}/data/input/{species}/{species}_gene_names_robin_ncbi.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# Join the data
left_join(data, gene.IDs, by = c('gene_ID_ncbi','gene_ID_ncbi'))
# Join the data
left_join(data, gene.IDs, by = 'gene_ID_ncbi'))
# Join the data
left_join(data, gene.IDs, by = 'gene_ID_ncbi')
# also make a colum for the gene ID's from Robin
#
# Load in the gene IDs
gene.IDs <- read.csv(glue("{path}/data/input/{species}/{species}_gene_names_robin_ncbi.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>% colnames()
########## TC6 Fungal Database ############
#
# This script is written to create a databse containing all the data of a 24h time-course experiment
#
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages --
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds
#
# Specify your path
path <- "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a/"
#
# Specify species
species <- 'beau'
# 0. Create the database / Load the data ----------------------------------
my.db <- dbConnect(RSQLite::SQLite(),
glue("{path}/data/databases/new_TC6_fungal_data.db"))
# 1. FPKM table  ----------------------------------------------------------
#
# Load in the expression data
exp.val <- read.csv(glue("{path}/results/normalized_gene_exp/raw_fpkm/{species}/normalized_gene_exp_{species}_all_samples.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# also make a colum for the gene ID's from Robin
#
# Load in the gene IDs
gene.IDs <- read.csv(glue("{path}/data/input/{species}/{species}_gene_names_robin_ncbi.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
colnames()
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
print(colnames())
# Join the data
#data <-
left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
colnames()
# Join the data
#data <-
left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
colnames([-1])
# Join the data
#data <-
left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
colnames(5)
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi')
# rearange cols
data[,c(16,1:15)]
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi') %>%
data[,c(16,1:15)]
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi')
# rearange cols
data <- data[,c(16,1:15)]
# Save file to database
dbWriteTable(my.db, glue("{species}_fpkm"), data)
# check if table is added in the database (by checking all tables)
src_dbi(my.db)
# list of all beau "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect()
# list of all beau "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi,
gene_ID_Robin) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
# list of all beau "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi,
gene_ID_robin) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
# list of all beau "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
# append this information to the beau data
expressed.sp <-
my.db %>%
select(-end,
-start) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
# append this information to the beau data
expressed.sp <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
View(expressed.sp)
View(expressed.sp)
# append this information to the beau data
expressed.sp <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start) %>%
collect %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
View(expressed.sp)
View(expressed.sp)
# append this information to the beau data
expressed.sp <-
data %>%
select(gene_ID_ncbi) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
View(expressed.sp)
# append this information to the beau data
expressed.sp <-
data %>%
select(gene_ID_ncbi, gene_ID_robin) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
# append this information to the beau data
expressed.sp <-
data %>%
select(gene_ID_ncbi, gene_ID_robin) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
# Save file to databse
dbWriteTable(my.db, glue("{species}_expressed_genes"), expressed.sp)
# show tables in DB
src_dbi(my.db)
#
# Specify species
species <- 'ophio_cflo'
########## TC6 Fungal Database ############
#
# This script is written to create a databse containing all the data of a 24h time-course experiment
#
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages --
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds
#
# Specify your path
path <- "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a/"
#
# Specify species
species <- 'ophio_cflo'
# 0. Create the database / connect to the database ----------------------------------
my.db <- dbConnect(RSQLite::SQLite(),
glue("{path}/data/databases/new_TC6_fungal_data.db"))
# 1. FPKM table  ----------------------------------------------------------
#
# Load in the expression data
exp.val <- read.csv(glue("{path}/results/normalized_gene_exp/raw_fpkm/{species}/normalized_gene_exp_{species}_all_samples.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# also make a colum for the gene ID's from Robin
#
# Load in the gene IDs
gene.IDs <- read.csv(glue("{path}/data/input/{species}/{species}_gene_names_robin_ncbi.csv"),
header = T, stringsAsFactors = F, na.strings = c(NA, "", " ")) %>%
as.data.frame()
# Join the data
data <- left_join(exp.val, gene.IDs, by = 'gene_ID_ncbi')
# rearange cols
data <- data[,c(16,1:15)]
# Save file to database
dbWriteTable(my.db, glue("{species}_fpkm"), data)
# check if table is added in the database (by checking all tables)
src_dbi(my.db)
# list of all beau "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
my.db %>%
tbl(glue("{species}_fpkm")) %>%
select(-end,
-start)%>%
collect() %>%
na.omit() %>% # Remove NA's
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>% # expression > 1 FPKM
pull(gene_ID_ncbi) %>% # get the gene names of the expressed genes
unique() # check wheter there are duplicates
# append this information to the beau data
expressed.sp <-
data %>%
select(gene_ID_ncbi, gene_ID_robin) %>%
mutate(expressed = ifelse(gene_ID_ncbi %in% expressed,"yes","no"))
# Save file to databse
dbWriteTable(my.db, glue("{species}_expressed_genes"), expressed.sp)
# show tables in DB
src_dbi(my.db)
# show tables in DB
src_dbi(my.db)
src_dbi(my.db)
