} else(
module_pfams[[i]] <-
module_pfams[[i]] %>%
filter(annot_desc!="no_desc") %>%
select(gene_name, enriched_in_module = annot_desc)
)
}
module_pfams[[i]] %>% is.character()
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in 1:length(which.labels)) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
if(nrow(module_pfams[[i]])==0 | is.character(module_pfams[[i]])) {
module_pfams[[i]] <- NULL
} else(
module_pfams[[i]] <-
module_pfams[[i]] %>%
filter(annot_desc!="no_desc") %>%
select(gene_name, enriched_in_module = annot_desc)
)
}
module_pfams[[i]]
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in c(1:5,7:length(which.labels))) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
if(nrow(module_pfams[[i]])==0 is.character(module_pfams[[i]])) {
module_pfams[[i]] <- NULL
} else(
module_pfams[[i]] <-
module_pfams[[i]] %>%
filter(annot_desc!="no_desc") %>%
select(gene_name, enriched_in_module = annot_desc)
)
}
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in c(1:5,7:length(which.labels))) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
if(nrow(module_pfams[[i]])==0) {
module_pfams[[i]] <- NULL
} else(
module_pfams[[i]] <-
module_pfams[[i]] %>%
filter(annot_desc!="no_desc") %>%
select(gene_name, enriched_in_module = annot_desc)
)
}
i
which.labels[[i]]
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
nrow(module_pfams[[i]])==0
module_pfams[[i]]) %>% class()
module_pfams[[i]] %>% class()
module_pfams[[i]]
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in c(1:5,8:length(which.labels))) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
if(nrow(module_pfams[[i]])==0) {
module_pfams[[i]] <- NULL
} else(
module_pfams[[i]] <-
module_pfams[[i]] %>%
filter(annot_desc!="no_desc") %>%
select(gene_name, enriched_in_module = annot_desc)
)
}
i
module_pfams[[i]]
module_pfams[[8]]
module_pfams[[7]]
module_pfams[[8]]
module_pfams[[9]]
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in c(1:5,8:length(which.labels))) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
}
## Now clean it up
sapply(module_pfams, class)
## Now clean it up
sapply(module_pfams, length)
## Now clean it up
sapply(module_pfams, dim)
## Now clean it up
sapply(module_pfams, nrow)
module_pfams[[16]]
module_pfams[[9]]
dim(module_pfams[[9]])==NULL
is.null(dim(module_pfams[[9]]))
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in 1:length(which.labels)) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module))
s
for (i in 1:length(module)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
paste(which.labels[[i]],"is null") %>% print()
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
}
}
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in 1:length(which.labels)) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
}
if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
} else {
if(i==1) {
module.pfams <- module_pfams[[i]]
} else {
module.pfams <- rbind(module.pfams, module_pfams[[i]])
}
}
}
## check the output data frame
module.pfams %>% head()
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc)
# check the output dataframe
module.pfams
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc) %>%
filter(enriched_in_module!="no_desc")
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
} else {
if(i==1) {
module.pfams <- module_pfams[[i]]
} else {
module.pfams <- rbind(module.pfams, module_pfams[[i]])
}
}
}
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc) %>%
filter(enriched_in_module!="no_desc")
# check the output dataframe
module.pfams
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name")
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns
select(module_identity, kTotal, enriched_in_module, everything())
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, kTotal, enriched_in_module)
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, kTotal, desc(enriched_in_module))
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, desc(kTotal), desc(enriched_in_module))
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, desc(kTotal), enriched_in_module)
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## Geneset: "rhy24-Ocflo-Okim"
mutate(rhy_ocflo_okim = ifelse(gene_name %in% gois.tc6[[2]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster3"
mutate(rhy_ocflo_beau_cluster3 = ifelse(gene_name %in% gois.tc6[[3]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster4"
mutate(rhy_ocflo_beau_cluster4 = ifelse(gene_name %in% gois.tc6[[4]], "yes", "no")) %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module,
gene_name, gene_desc,
rhy_ocflo_okim, rhy_ocflo_beau_cluster3, rhy_ocflo_beau_cluster4,
everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn
## export it
write.csv(results.gcn,
file = paste0(path_to_repo, "/results/00_supplementary_files/07_Ocflo_GCN_results.csv"),
row.names = F)
# Calculate the connectivities of the genes
Alldegrees1=intramodularConnectivity(adjMat = adj_matrix, colors = colorh1)
Alldegrees1 %>%
rownames_to_column("gene_name") %>%
mutate_at(vars(starts_with("k")),
function(x){
round(x,2)
})
Alldegrees1 <-
Alldegrees1 %>%
rownames_to_column("gene_name") %>%
mutate_at(vars(starts_with("k")),
function(x){
round(x,2)
})
head(Alldegrees1)
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## Geneset: "rhy24-Ocflo-Okim"
mutate(rhy_ocflo_okim = ifelse(gene_name %in% gois.tc6[[2]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster3"
mutate(rhy_ocflo_beau_cluster3 = ifelse(gene_name %in% gois.tc6[[3]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster4"
mutate(rhy_ocflo_beau_cluster4 = ifelse(gene_name %in% gois.tc6[[4]], "yes", "no")) %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module,
gene_name, gene_desc,
rhy_ocflo_okim, rhy_ocflo_beau_cluster3, rhy_ocflo_beau_cluster4,
everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn
## export it
write.csv(results.gcn,
file = paste0(path_to_repo, "/results/00_supplementary_files/07_Ocflo_GCN_results.csv"),
row.names = F)
results.gcn %>%
head()
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(ophio_gene) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>%
## run stacked zplots
pull(gene_name) %>%
stacked.zplot_tc6(plot.mean = F, bg.alpha = 0.8, bg.lwd=1.5)
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(gene_name) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>%
## run stacked zplots
pull(gene_name) %>%
stacked.zplot_tc6(plot.mean = F, bg.alpha = 0.8, bg.lwd=1.5)
rm(dissTOM)
