View(ophio_cflo_gff_ncbi)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, nrows = 1, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
View(ophio_cflo_gff_ncbi)
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
gff_robin <- read.csv(path_R, sep = '\t', header = col_names, stringsAsFactors = F)
gff_robin <- read.csv(path_R, sep = '\t', header = F, colnames = col_names, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
colnames(col_names)
colnames(gff_robin) <- col_names
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes') %>%
colnames(gff_robin)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes') %>%
colnames(gff_robin)
colnames(gff_ncbi) <- col_names
colnames(gff_robin) <- col_names
# load libraries
library(tidyverse)
gff_robin <- gff_robin %>%
filter(feature == "gene") %>%
select(start, end, attributes_robin = attributes)
gff_ncbi <- gff_ncbi %>%
filter(feature == "gene") %>%
select(start, end, attributes_ncbi = attributes)
head(ophio_cflo_gff_robin)
head(gff_robin)
head(gff_ncbi)
# initial split
foo <- gff_robin %>%
separate(attributes_robin, c("a","b"), "=", extra = "merge")
# final split to obtain only the gene names
gff_robin$attributes_robin <- unlist(strsplit(foo$b,"|gene",4))
gff_ncbi <-
gff_ncbi %>%
separate(attributes_ncbi, c("a","b","c"), ";", extra = "merge") %>%
select(-c(a,c)) %>%
separate(b, c("b","c"), "=", extra = "merge") %>%
select(start, end, attributes_ncbi=c)
gff_robin_ncbi <-
gff_robin %>%
full_join(gff_ncbi)
# SAVE THE FILE
file_name <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_gene_names_robin_ncbi.csv')
write.csv(gff_robin_ncbi,
file = file_name,
row.names = F)
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
Read the two gff files
* one from Robin (can be downloaded at: .. )
```{r}
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
* the other from NCBI (can be downloaded)
This file has to be edited to work. The lines that start with a '#' are removed. This can be done with the following command line code (bash) or manually
```bash
file='give_file_name'
awk -F '\t' -v OFS=, '!/^#/ {$1=$1;print}' ${file}.gff > ${file}.csv;
```
Then read the file in
```{r}
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
```
And name the columns
```{r}
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
colnames(gff_robin) <- col_names
colnames(gff_ncbi) <- col_names
Step one:
- Filter and keep only the rows with feature=="gene"
- Select only the "start", "end", and "attributes" column
```{r}
# load libraries
library(tidyverse)
gff_robin <- gff_robin %>%
filter(feature == "gene") %>%
select(start, end, attributes_robin = attributes)
gff_ncbi <- gff_ncbi %>%
filter(feature == "gene") %>%
select(start, end, attributes_ncbi = attributes)
Check to see if your code worked!
```{r}
head(gff_robin)
head(gff_ncbi)
Step two:
- Clean the attributes column to retain only the gene names
```{r}
getwd()
# ## Cleaning the Ophio_kim annotation file
#
# foo <- read.csv("./Das_et_al_2022a/results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin.csv",
#                 header = T,
#                 stringsAsFactors = F)
#
library(tidyverse)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
colnames(foo) <- col_names
bar <- read.csv("./data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("gene_name" = "attributes_robin")) %>%
select(gene_name,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_ncbi.csv",
row.names = F)
print(colnames(foo[1]))
colnames(foo[1]) <- 'gene_name'
colnames(foo[1]) <- 'gene_name'
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(gene_name,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_ncbi.csv",
row.names = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./beau_annots_robin_ncbi.csv",
row.names = F)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./beau_annots_robin_ncbi.csv",
row.names = F)
getwd()
foo <- read.csv('./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt',
header = T,
sep = '\t',
stringsAsFactors = F)
library(tidyverse)
protein_name <- character()
for (i in 1:nrow(foo)) {
protein_name[i] <- str_split(foo$ProteinId.t1, ".t1")[[i]][1]
}
protein_name <- character()
for (i in 1:nrow(foo)) {
protein_name[i] <- str_split(foo$ProteinID.t1, ".t1")[[i]][1]
}
foo[1] <- protein_name
foo %>%
select(gene_name=ProteinId.t1,
GOs=GO.annotation..terminal.nodes.only.,
pfams=PFAM.annotation,
signalP=SignalP.SmallSecretedProteins,
TMHMM=Transmembrane.domains,
sc16a_ccl_up_down=SC16a....CcL..Up.Down,
sc16a_ccd_up_down=SC16a....CcD..Up.Down,
ccl_ccd_up_down=CcL....CcD..Up.Down) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_cleaned.csv",
row.names = F)
foo %>%
select(gene_name=ProteinID.t1,
GOs=GO.annotation..terminal.nodes.only.,
pfams=PFAM.annotation,
signalP=SignalP.SmallSecretedProteins,
TMHMM=Transmembrane.domains,
sc16a_ccl_up_down=SC16a....CcL..Up.Down,
sc16a_ccd_up_down=SC16a....CcD..Up.Down,
ccl_ccd_up_down=CcL....CcD..Up.Down) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_cleaned.csv",
row.names = F)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# 00. Load Databases -----------------------------------------------------------
#
# 1. TC7_ejtk.db
# Desc: This database contains all ejtk-output for TC7
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC7_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
# A2: run enrichment (make plot of enrichment found of non-expressed genes)
not.expressed %>%
go_enrichment(.,
org = "beau",
bg = 'all') %>%  # enrichment against all ophio_cflo genes in the genome
go_enrichment_plot(clean = "no")
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
getwd()
setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2")
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
colnames(gff_robin) <- col_names
colnames(gff_ncbi) <- col_names
# load libraries
library(tidyverse)
gff_robin <- gff_robin %>%
filter(feature == "gene") %>%
select(start, end, attributes_robin = attributes)
gff_ncbi <- gff_ncbi %>%
filter(feature == "gene") %>%
select(start, end, attributes_ncbi = attributes)
head(gff_robin)
head(gff_ncbi)
## Robin's annotation
# initial split
foo <- gff_robin %>%
separate(attributes_robin, c("a","b"), "=", extra = "merge")
# final split to obtain only the gene names
gff_robin$attributes_robin <- unlist(strsplit(foo$b,"|gene",4))
## NCBI's annotation
# all-in-one
gff_ncbi <-
gff_ncbi %>%
separate(attributes_ncbi, c("a","b","c"), ";", extra = "merge") %>%
select(-c(a,c)) %>%
separate(b, c("b","c"), "=", extra = "merge") %>%
select(start, end, attributes_ncbi=c)
gff_robin_ncbi <-
gff_robin %>%
full_join(gff_ncbi)
# SAVE THE FILE
file_name <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_gene_names_robin_ncbi.csv')
write.csv(gff_robin_ncbi,
file = file_name,
row.names = F)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# 00. Load Databases -----------------------------------------------------------
#
# 1. TC7_ejtk.db
# Desc: This database contains all ejtk-output for TC7
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC7_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
# A2: run enrichment (make plot of enrichment found of non-expressed genes)
not.expressed %>%
go_enrichment(.,
org = "beau",
bg = 'all') %>%  # enrichment against all ophio_cflo genes in the genome
go_enrichment_plot(clean = "no")
setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2/Das_et_al_2022a")
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# 00. Load Databases -----------------------------------------------------------
#
# 1. TC7_ejtk.db
# Desc: This database contains all ejtk-output for TC7
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC7_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
write(not.expressed, file = past0('./results/',{sample.name},'_not_expressed_list.txt'),
sep = " ")
write(not.expressed, file = paste0('./results/',{sample.name},'_not_expressed_list.txt'),
sep = " ")
# A2: run enrichment (make plot of enrichment found of non-expressed genes)
not.expressed %>%
go_enrichment(.,
org = "beau",
bg = 'all') %>%  # enrichment against all ophio_cflo genes in the genome
go_enrichment_plot(clean = "no")
# B: genes that are expressed (FPKM > 1 for at least one time point)
expressed <-
tbl(data.db, paste0(sample.name,"_expressed_genes")) %>%
filter(expressed=="yes") %>%
collect() %>%
pull(gene_name)
# A2: run enrichment (make plot of enrichment found of non-expressed genes)
not.expressed %>%
go_enrichment(.,
org = "beau",
bg = 'all') %>%  # enrichment against all ophio_cflo genes in the genome
go_enrichment_plot(clean = "no")
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
#
# Choose period
period = '24'
# Ultradian genes (period = 8h)
##
rhy <-
tbl(ejtk.db, paste0(sample.name,"_zscores_",period,'h')) %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
## load zscore dataset
zscore.dat <- data.db %>% tbl(., paste0(sample.name,"_zscores")) %>% collect()
# Filter the zscores to keep only rhythmic genes
zscore.rhy <-
zscore.dat %>%
filter(gene_name %in% rhy) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.rhy) = zscore.rhy$gene_name
zscore.rhy <- as.matrix(zscore.rhy[-1])
# Hierarchical clustering of the genesets
my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 2) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(40,60)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 2, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
## day-peaking | cluster 3 ##
rhy.24.daypeaking.cluster3 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 3) %>%
pull(gene) %>%
# run enrichment analysis
go_enrichment(.,
org = "ophio_cflo",
bg = expressed) # enrichment against all expressed ophio_cflo genes
rhy.24.daypeaking.cluster3 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 3) %>%
pull(gene) %>%
# run enrichment analysis
go_enrichment(.,
org = "beau",
bg = expressed) # enrichment against all expressed ophio_cflo genes
# view the results
rhy.24.daypeaking.cluster3 %>% view()
## night-peaking | cluster 1 ##
rhy.24.nightpeaking.cluster1 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 1) %>%
pull(gene) %>%
go_enrichment(.,
org = "beau",
bg = "expressed")
