left_join(data, by='ophio_kim_ID') %>%
pull(ophio_cflo_ID)
length(bar)
# Night-peaking ophio.cflo (833 genes)
foo <-
read_csv(glue('{path_to_repo}/data/rdata/ophio_cflo_hierachical_clusters.csv')) %>%
filter(cluster == '1') %>%
pull(gene_ID_robin)
length(foo)
# rhytmic genes in ophio cflo and kim as ophio cflo ID's (342)
both_rhy4 <- data %>%
filter( rhythmic_24h_ophio_kim == 'yes' & rhythmic_24h_ophio_cflo == 'yes') %>%
unique() %>%
pull(ophio_cflo_ID)
# non rhythmic genes in ophio kim and cflo, as ophio cflo ID's (3506)
not_rhy4 <- data %>%
filter( rhythmic_24h_ophio_kim == 'no' & rhythmic_24h_ophio_cflo == 'no')%>%
unique() %>%
pull(ophio_cflo_ID)
#################
# overlap between rhy_cflo and rhy_kim (342)
x1 <- intersect(foo, bar) %>% length()
# genes in cflo_rhy but not in kim_rhy (1762)
x2 <- setdiff(foo, bar) %>% length()
# genes in kim_rhy and not in cflo_rhy (683)
x3 <- setdiff(bar, foo) %>% length()
# genes not in a and not in b, or just total amount of genes? Just picked 7455
x4 <- 7455
# make the table
con.table <- data.frame(c1 = c(x1,x2),
c2 = c(x3,x4))
fisher.test(con.table)
write.csv(bar, 'foo.csv')
############
# Night-peaking ophio.kim (134 genes)
bar <-
read_csv(glue('{path_to_repo}/data/ophio_kim_2017.csv')) %>%
filter(Clustered_Activity == 'night-active')  %>%
unique() %>%
left_join(data, by='ophio_kim_ID')
View(bar)
write_csv(bar, 'foo.csv')
set.seed(420)
rm(list = ls())
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, WGCNA, igraph)
pacman::p_load(glue)
#' set conflict preference
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
conflict_prefer("hclust", "flashClust")
#' set path to your working directory
path_to_repo = "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a"
# script name
script.name = "03_compare_circadianGCN_ophio-cflo_v_ophio-kim"
species <- 'ophio_cflo'
#' load functions
# customized theme for publication quality figures
source(paste0(path_to_repo,"/functions/theme_publication.R"))
# function to perform enrichment analysis
source(paste0(path_to_repo,"/functions/enrichment_analysis.R"))
# function to plot z-scores (Cflo genes only)
source(paste0(path_to_repo,"/functions/plot_zscores.R"))
# Connect to db's
rhy.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
## Overview/Goals
Compare the gene co-expression networks of Ophiocordyceps camponoti-floridani (Ocflo) and Ophiocordyceps kimflemingae (Okim) to:
- identify the modules that are highly conserved
- identify the modules that show no evidence for preservation
## Step 1: Identify the homologous genes
### 1.1 Load, clean and merge data
Dataset: Ophio cflo data (as csv file), containing information about rhythmic genes and ophio kim homologs. Ophio kim data (stored in DB), containing information about rhythmic genes in Ophio_kim
```{r load_data}
# load cflo data with the with the following info: Robin gene ID's of cflo, homologs of kim in cflo, 24h rhythmic genes in cflo and the gammaP value of the 24h rhythmic genes
cflo.data <- read.csv(glue('{path_to_repo}/data/ophio_cflo_TC6_data.csv')) %>%
select(ophio_cflo_ID = gene_ID_robin, ophio_kim_ID = ophio_kim_homolog, rhythmic_24h_ophio_cflo = rhythmic_24h)
# load the ophio kim data with the following info: Robin's gene ID's, 24h rhythmic genes in ophio_kim and their GammaP value
kim.data <- rhy.db %>%
tbl('ophio_kim_LD_rhythmic_genes_24h') %>%
select(rhythmic_24h_ophio_kim = rhythmic, ophio_kim_ID = gene_ID_robin) %>%
collect()
# unique one-to-one homologous okim genes
orthos.kim <-
cflo.data %>%
select(-rhythmic_24h_ophio_cflo) %>%
distinct() %>%
na.omit() %>%
group_by(ophio_kim_ID) %>%
summarise(num = n()) %>%
filter(num == 1) %>%
pull(ophio_kim_ID) %>%
as.character()
# Merge the data on othologs of ophio kim with ophio cflo
# data <- left_join(kim.data, orthos, by='ophio_kim_ID')
data <-
cflo.data %>%
filter(ophio_kim_ID %in% orthos.kim) %>%
left_join(kim.data, by="ophio_kim_ID")
# Merge the data on othologs of ophio kim with ophio cflo
# data <- left_join(kim.data, orthos, by='ophio_kim_ID')
data <-
cflo.data %>%
filter(ophio_kim_ID %in% orthos.kim) %>%
left_join(kim.data, by="ophio_kim_ID")
### 1.2 Select rhytmic genes data in Ophio cflo and Ophio kim as ophio_clfo gene ID's
```{r load_data}
# ophio cflo rhythmic genes as ophio cflo gene ID's (2104 genes)
cflo_rhy24h <- data %>%
filter(rhythmic_24h_ophio_cflo == 'yes') %>%
unique() %>%
pull(ophio_cflo_ID)
# ophio cflo rhythmic genes as ophio gene cflo ID's (1025)
kim_rhy24h <- data %>%
filter(rhythmic_24h_ophio_kim == 'yes') %>%
unique() %>%
pull(ophio_cflo_ID)
# rhytmic genes in ophio cflo and kim as ophio cflo ID's (342)
both_rhy4 <- data %>%
filter( rhythmic_24h_ophio_kim == 'yes' & rhythmic_24h_ophio_cflo == 'yes') %>%
unique() %>%
pull(ophio_cflo_ID)
# non rhythmic genes in ophio kim and cflo, as ophio cflo ID's (3506)
not_rhy4 <- data %>%
filter( rhythmic_24h_ophio_kim == 'no' & rhythmic_24h_ophio_cflo == 'no')%>%
unique() %>%
pull(ophio_cflo_ID)
### Constituently table
```{r load_data}
# overlap between rhy_cflo and rhy_kim (342)
x1 <- intersect(cflo_rhy24h,kim_rhy24h) %>% length()
# genes in cflo_rhy but not in kim_rhy (1762)
x2 <- setdiff(cflo_rhy24h, kim_rhy24h) %>% length()
# genes in kim_rhy and not in cflo_rhy (683)
x3 <- setdiff(kim_rhy24h, cflo_rhy24h) %>% length()
# genes not in a and not in b, or just total amount of genes? Just picked 7455
x4 <- 7455
# make the table
con.table <- data.frame(c1 = c(x1,x2),
c2 = c(x3,x4))
Fishers exact test to find if there is a significant overlap between rhy genes in ophio cflo and ophio kim
```{r load_data}
fisher.test(con.table)
set.seed(420)
rm(list = ls())
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, igraph)
pacman::p_load(patchwork, glue)
#' set conflict preference
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
conflict_prefer("hclust", "flashClust")
#' set path to your working directory
path_to_repo = "."
#' load functions
# customized theme for publication quality figures
source(paste0(path_to_repo,"/functions/theme_publication.R"))
# function to perform enrichment analysis
source(paste0(path_to_repo,"/functions/enrichment_analysis.R"))
# function to plot z-scores (Cflo genes only)
source(paste0(path_to_repo,"/functions/plot_zscores.R"))
# loading database which contains data for Das and de Bekker 2021 (bioRxiv)
db <- dbConnect(RSQLite::SQLite(), paste0(path_to_repo,"/data/databases/new_TC6_fungal_data.db"))
src_dbi(db)
# specify sample name
sample.name <- "ophio_cflo"
file <- read_csv(glue('./data/{sample.name}_TC6_data.csv'))
# extract the (gene-expr X time-point) data
dat <-
db %>%
tbl(., paste0(sample.name ,"_fpkm")) %>%
select(gene_name = gene_ID_robin, everything()) %>%
select(-c(start,end, gene_ID_ncbi)) %>%
collect()
# Which genes are expressed throughout the day in forager heads?
# count the number of time points that has â‰¥ 1 FPKM
n.expressed <- apply(dat[-1], 1, function(x) sum(x >= 1))
# subset the data and only keep the filtered genes
dat <- dat[which(n.expressed >=6),]
datExpr = as.data.frame(t(log2(dat[-c(1)]+1)))
names(datExpr) = dat$gene_name
rownames(datExpr) = names(dat)[-c(1)]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
pacman::p_load(GeneOverlap)
# https://www.bioconductor.org/packages/devel/bioc/vignettes/GeneOverlap/inst/doc/GeneOverlap.pdf
mergedMEs=read_csv('./results/networks/ophio_cflo_gene_IDs_and_module_identity.csv')
colors <- mergedMEs$module_identity %>% unique()
module_colors <- mergedMEs$module_identity %>% unique()
mergedMEs$gene_ID_robin[mergedMEs$module_identity == colors[1]]
# Make a list that returns gene names for a given cluster
module_color = colors
module = names(mergedMEs)
module_genes <- list()
module_color <- module_colors
# Get the genes from each of the modules
for (i in 1:length(module_color)) {
module_genes[[i]] <- mergedMEs$gene_ID_ncbi[mergedMEs$module_identity == colors[i]]
names(module_genes)[[i]] <- module_color[[i]]
}
install.packages("readxl")
install.packages("readxl")
library("readxl")
library("readxl")
ejtk.db <- dbConnect(RSQLite::SQLite(), paste0(path_to_repo,"/data/databases/TC6_fungal_ejtk.db"))
DEGs <- read_excel('./supplement/upregulated_DEGs_Will_2020.xlsx')
ll <- DEGs$arb2_gene
# LIST ONE - WGCNA modules
list1 <- module_genes
sapply(list1, length)
## LIST TWO - rhythmic genes
list2 <- list(ll,ll)
names(list2) <- c('DEG_alive', 'copy')
sapply(list2, length)
## make a GOM object
gom.1v2 <- newGOM(list1, list2,
genome.size = nGenes)
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, igraph)
pacman::p_load(patchwork, glue)
pacman::p_load(GeneOverlap)
## make a GOM object
gom.1v2 <- newGOM(list1, list2,
genome.size = nGenes)
png(paste0(path_to_repo, "/results/figures/", sample.name,"_DEG_gom_1v2.png"),
width = 20, height = 30, units = "cm", res = 300)
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
trash <- dev.off()
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
list1
list2
list1
list2
set.seed(420)
rm(list = ls())
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, igraph)
pacman::p_load(patchwork, glue)
#' set conflict preference
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
conflict_prefer("hclust", "flashClust")
#' set path to your working directory
path_to_repo = "."
#' load functions
# customized theme for publication quality figures
source(paste0(path_to_repo,"/functions/theme_publication.R"))
# function to perform enrichment analysis
source(paste0(path_to_repo,"/functions/enrichment_analysis.R"))
# function to plot z-scores (Cflo genes only)
source(paste0(path_to_repo,"/functions/plot_zscores.R"))
# loading database which contains data for Das and de Bekker 2021 (bioRxiv)
db <- dbConnect(RSQLite::SQLite(), paste0(path_to_repo,"/data/databases/new_TC6_fungal_data.db"))
src_dbi(db)
# specify sample name
sample.name <- "ophio_cflo"
file <- read_csv(glue('./data/{sample.name}_TC6_data.csv'))
# extract the (gene-expr X time-point) data
dat <-
db %>%
tbl(., paste0(sample.name ,"_fpkm")) %>%
select(gene_name = gene_ID_robin, everything()) %>%
select(-c(start,end, gene_ID_ncbi)) %>%
collect()
# Which genes are expressed throughout the day in forager heads?
# count the number of time points that has â‰¥ 1 FPKM
n.expressed <- apply(dat[-1], 1, function(x) sum(x >= 1))
# subset the data and only keep the filtered genes
dat <- dat[which(n.expressed >=6),]
datExpr = as.data.frame(t(log2(dat[-c(1)]+1)))
names(datExpr) = dat$gene_name
rownames(datExpr) = names(dat)[-c(1)]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
pacman::p_load(GeneOverlap)
# https://www.bioconductor.org/packages/devel/bioc/vignettes/GeneOverlap/inst/doc/GeneOverlap.pdf
mergedMEs=read_csv('./results/networks/ophio_cflo_gene_IDs_and_module_identity.csv')
colors <- mergedMEs$module_identity %>% unique()
module_colors <- mergedMEs$module_identity %>% unique()
mergedMEs$gene_ID_robin[mergedMEs$module_identity == colors[1]]
# Make a list that returns gene names for a given cluster
module_color = colors
module = names(mergedMEs)
module_genes <- list()
module_color <- module_colors
# Get the genes from each of the modules
for (i in 1:length(module_color)) {
module_genes[[i]] <- mergedMEs$gene_ID_robin[mergedMEs$module_identity == colors[i]]
names(module_genes)[[i]] <- module_color[[i]]
}
install.packages("readxl")
install.packages("readxl")
library("readxl")
ejtk.db <- dbConnect(RSQLite::SQLite(), paste0(path_to_repo,"/data/databases/TC6_fungal_ejtk.db"))
DEGs <- read_excel('./supplement/upregulated_DEGs_Will_2020.xlsx')
ll <- DEGs$arb2_gene
# LIST ONE - WGCNA modules
list1 <- module_genes
sapply(list1, length)
## LIST TWO - rhythmic genes
list2 <- list(ll,ll)
names(list2) <- c('DEG_alive', 'copy')
sapply(list2, length)
## make a GOM object
gom.1v2 <- newGOM(list1, list2,
genome.size = nGenes)
png(paste0(path_to_repo, "/results/figures/", sample.name,"_DEG_gom_1v2.png"),
width = 20, height = 30, units = "cm", res = 300)
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
trash <- dev.off()
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
dev.off()
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
trash <- dev.off()
############ DEG and rhy
ejtk.db <- dbConnect(RSQLite::SQLite(), paste0(path_to_repo,"/data/databases/TC6_fungal_ejtk.db"))
rhy.24 <- tbl(ejtk.db, paste0(sample.name,"_zscores_24h")) %>%
filter(GammaP < 0.05) %>% pull(ID)
rhy.12 <-
tbl(ejtk.db, paste0(sample.name,"_zscores_12h")) %>%
filter(GammaP < 0.05) %>% pull(ID)
rhy.08 <-
tbl(ejtk.db, paste0(sample.name,"_zscores_08h")) %>%
filter(GammaP < 0.05) %>% pull(ID)
## LIST TWO - rhythmic genes
list1 <- list(rhy.24, rhy.12, rhy.08)
names(list1) <- paste0(sample.name, c("-24h", "-12h", "-08h"))
sapply(list1, length)
gom.1v2 <- newGOM(list1, list2,
genome.size = nGenes)
png(paste0(path_to_repo, "/results/figures/", sample.name,"_DEG_rhy_gom_1v2.png"),
width = 20, height = 30, units = "cm", res = 300)
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
dev.off()
drawHeatmap(gom.1v2,
adj.p=T,
cutoff=0.05,
what="odds.ratio",
# what="Jaccard",
log.scale = T,
note.col = "grey80")
#
# set working dirictory
# setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2/Das_et_al_2022a")
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
#' set path to your working directory
path_to_repo = "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a"
#################
# Overlap DEG signalP and rhytmic genes ophio
# overlap between rhy_cflo and rhy_kim (342)
x1 <- 55
# genes in cflo_rhy but not in kim_rhy (1762)
x2 <- 187
# genes in kim_rhy and not in cflo_rhy (683)
x3 <- 2285
# genes not in a and not in b, or just total amount of genes? Just picked 7455
x4 <- 2417
# make the table
con.table <- data.frame(c1 = c(x1,x2),
c2 = c(x3,x4))
fisher.test(con.table)
#################
# Overlap DEG signalP and rhytmic genes ophio
# overlap between rhy_cflo and rhy_kim (342)
x1 <- 124
# genes in cflo_rhy but not in kim_rhy (1762)
x2 <- 320
# genes in kim_rhy and not in cflo_rhy (683)
x3 <- 2285
# genes not in a and not in b, or just total amount of genes? Just picked 7455
x4 <- 2481
# make the table
con.table <- data.frame(c1 = c(x1,x2),
c2 = c(x3,x4))
fisher.test(con.table)
library(readr)
overlapping_genes_with_DEG <- read_csv("supplement/overlapping_genes_with_DEG.csv")
View(overlapping_genes_with_DEG)
### What is in the annoataions of overlapping genes
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
# Read in data
path = "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a"
read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
### What is in the annoataions of overlapping genes
set.seed(420)
rm(list = ls())
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
pacman::p_load(glue)
# Read in data
path = "/Users/roos_brouns/Dropbox/Ant-fungus/02_scripts/Git_Das_folder2/Das_et_al_2022a"
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
View(overlap_data)
annot_data <- read_csv(glue('{path}/data/ophio_cflo_TC6_data.csv'))
View(annot_data)
annot_data <- read_csv(glue('{path}/data/ophio_cflo_TC6_data.csv')) %>%
select(gene_ID_robin, gene_ID_ncbi)
annot_data <- read_csv(glue('{path}/data/ophio_cflo_TC6_data.csv')) #%>%
View(annot_data)
annot_data <- read_csv(glue('{path}/data/input/ophio_cflo/ophio_cflo_annots_robin.csv')) #%>%
annot_data <- read_csv(glue('{path}/data/input/ophio_cflo/ophio_cflo_annots_robin_ncbi.csv')) #%>%
View(annot_data)
View(overlap_data)
# 24h overlap with upregulated DEG TMHMM
DEG.TMHMM <-
overlap_data$124 common elements in "DEG TMHMM" and "24h rhythmic"
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv')
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv')
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
# 24h overlap with upregulated DEG TMHMM
DEG.TMHMM <-
overlap_data$`124 common elements in DEG TMHMM and 24h rhythmic`
View(annot_data)
overlap.w.annots <-
annot_data %>%
select(arb2_gene) %>%
mutate(24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no'))
overlap.w.annots <-
annot_data %>%
select(arb2_gene) %>%
mutate(rhy24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no'))
View(overlap.w.annots)
overlap.w.annots <-
annot_data %>%
mutate(rhy24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no'))
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
overlap_data <- read_csv(glue('{path}/supplement/overlapping_genes_with_DEG.csv'))
overlap.w.annots <-
annot_data %>%
mutate(rhy24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no')) %>%
mutate(rhy24h_DEG_signalP_overlap = ifelse(arb2_gene %in% DEG.signalP, 'yes', 'no'))
DEG.signalP <-
overlap_data$`55 common elements in DEG signalP and 24h rhytmic`
overlap.w.annots <-
annot_data %>%
mutate(rhy24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no')) %>%
mutate(rhy24h_DEG_signalP_overlap = ifelse(arb2_gene %in% DEG.signalP, 'yes', 'no'))
View(overlap.w.annots)
DEG.module_A7 <-
overlap_data$`127 common elements in DEGS and Modele A7`
DEG.module_A1 <-
overlap_data$`174 common elements in DEGS and Modele A1`
overlap.w.annots <-
annot_data %>%
mutate(rhy24h_DEG_TMHMM_overlap = ifelse(arb2_gene %in% DEG.TMHMM, 'yes', 'no')) %>%
mutate(rhy24h_DEG_signalP_overlap = ifelse(arb2_gene %in% DEG.signalP, 'yes', 'no')) %>%
mutate(rhy24h_DEG_mA7_overlap = ifelse(arb2_gene %in% DEG.module_A7, 'yes', 'no')) %>%
mutate(rhy24h_DEG_mA1_overlap = ifelse(arb2_gene %in% DEG.module_A1, 'yes', 'no'))
write_csv(overlap.w.annots, glue('{path}/supplement/overlap_24hrhy_upDEG_w_annots.csv'))
