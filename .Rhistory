my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 3&4) %>% # NAME here the cluster
pull(gene) #%>%
# save day peaking cluster to a file
cluster.file.name.D <- paste0('./results/temp_files/',sample.name,'_',period,'h.txt')
lapply(rhy.daypeaking.cluster, write, cluster.file.name.D, append=TRUE, ncolumns=1000)
length(rhy.daypeaking.cluster)
library(readr)
ophio_cflo_gene_names_robin_ncbi <- read_csv("data/input/ophio_cflo/ophio_cflo_gene_names_robin_ncbi.csv")
View(ophio_cflo_gene_names_robin_ncbi)
?left_join()
#get robin names
merge <- as.data.frame(rhy.daypeaking.cluster)
View(merge)
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' == 'gene_ID_ncbi'))
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' = 'gene_ID_ncbi'))
View(hoi)
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp/',sample.name,'_',period,'h.txt')
write.csv(hoi, cluster.file.name)
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'h.txt')
write.csv(hoi, cluster.file.name)
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period)
write.csv(hoi, cluster.file.name)
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'.csv')
write.csv(hoi, cluster.file.name)
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
#
# Choose period
period = '12'
# Ultradian genes (period = 8h)
##
rhy <-
tbl(ejtk.db, paste0(sample.name,"_zscores_",period,'h')) %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# How many genes are rythmic?
length(rhy)
print(paste0("genes are rythmic expression during", period,"hours"))
## load zscore dataset
zscore.dat <- data.db %>% tbl(., paste0(sample.name,"_zscores")) %>% collect()
# Filter the zscores to keep only rhythmic genes
zscore.rhy <-
zscore.dat %>%
filter(gene_name %in% rhy) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.rhy) = zscore.rhy$gene_name
zscore.rhy <- as.matrix(zscore.rhy[-1])
# Hierarchical clustering of the genesets
my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 3&4) %>% # NAME here the cluster
pull(gene) #%>%
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 1&4) %>% # NAME here the cluster
pull(gene) #%>%
# save day peaking cluster to a file
cluster.file.name.D <- paste0('./results/temp_files/',sample.name,'_',period,'h.txt')
lapply(rhy.daypeaking.cluster, write, cluster.file.name.D, append=TRUE, ncolumns=1000)
length(rhy.daypeaking.cluster)
# run enrichment analysis
go_enrichment(.,
org = sample.name,
bg = expressed) # enrichment against all expressed ophio_cflo genes
# run enrichment analysis
go_enrichment(rhy.daypeaking.cluster,
org = sample.name,
bg = expressed) # enrichment against all expressed ophio_cflo genes
# view the results
rhy.daypeaking.cluster %>% view()
# Plotting the enriched GOs for day-peaking clusters
rhy.daypeaking.cluster %>%
go_enrichment_plot(clean = "no",
# function.dir = path_to_repo,
fdr = 5)
## night-peaking | cluster 1 ##
rhy.nightpeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 1) %>%
pull(gene)
#get robin names
merge <- as.data.frame(rhy.daypeaking.cluster)
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'.csv')
write.csv(hoi, cluster.file.name)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 1&4) %>% # NAME here the cluster
pull(gene) #%>%
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 2&4) %>% # NAME here the cluster
pull(gene) #%>%
# run enrichment analysis
go_enrichment(rhy.daypeaking.cluster,
org = sample.name,
bg = expressed) # enrichment against all expressed ophio_cflo genes
# view the results
rhy.daypeaking.cluster %>% view()
# Plotting the enriched GOs for day-peaking clusters
rhy.daypeaking.cluster %>%
go_enrichment_plot(clean = "no",
# function.dir = path_to_repo,
fdr = 5)
## night-peaking | cluster 1 ##
rhy.nightpeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 1) %>%
pull(gene)
#get robin names
merge <- as.data.frame(rhy.daypeaking.cluster)
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'.csv')
write.csv(hoi, cluster.file.name)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% 2&4)
View(rhy.daypeaking.cluster)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(2&4)) # %in% for filter in 2, == for one
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(2&4)) # %in% for filter in 2, == for one
View(rhy.daypeaking.cluster)
## day-peaking | cluster 3 ##
rhy.daypeaking.cluster <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(2,4)) # %in% c=(1,2) for filter in 2, == for one
View(rhy.daypeaking.cluster)
################ Export for enrichment on robins site -------------------------
#get robin names
merge <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(2,4)) # %in% c=(1,2) for filter in 2, == for one
hoi <- left_join(merge, ophio_cflo_gene_names_robin_ncbi, by=c('rhy.daypeaking.cluster' = 'gene_ID_ncbi'))
################ Export for enrichment on robins site -------------------------
#get robin names
names_robin_ncbi <- read_csv("data/input/ophio_cflo/ophio_cflo_gene_names_robin_ncbi.csv")
View(names_robin_ncbi)
merge <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(2,4)) # %in% c=(1,2) for filter in 2, == for one
View(merge)
hoi <- left_join(merge, names_robin_ncbi, by=c('gene' = 'gene_ID_ncbi'))
View(hoi)
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'.csv')
write.csv(hoi, cluster.file.name)
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'.csv')
write.csv(hoi, cluster.file.name)
merge <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster %in% c(1,3)) # %in% c=(1,2) for filter in 2, == for one
hoi <- left_join(merge, names_robin_ncbi, by=c('gene' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_cluster_1_3.csv')
hoi <- left_join(merge, names_robin_ncbi, by=c('gene' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_cluster_Bl_Br.csv')
write.csv(hoi, cluster.file.name)
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
#
# Choose period
period = '08'
# Ultradian genes (period = 8h)
##
rhy <-
tbl(ejtk.db, paste0(sample.name,"_zscores_",period,'h')) %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# How many genes are rythmic?
length(rhy)
print(paste0("genes are rythmic expression during", period,"hours"))
## load zscore dataset
zscore.dat <- data.db %>% tbl(., paste0(sample.name,"_zscores")) %>% collect()
# Filter the zscores to keep only rhythmic genes
zscore.rhy <-
zscore.dat %>%
filter(gene_name %in% rhy) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.rhy) = zscore.rhy$gene_name
zscore.rhy <- as.matrix(zscore.rhy[-1])
# Hierarchical clustering of the genesets
my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
################ Export for enrichment on robins site -------------------------
#get robin names
names_robin_ncbi <- read_csv("data/input/ophio_cflo/ophio_cflo_gene_names_robin_ncbi.csv")
merge <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 1) # %in% c(1,3)) # %in% c=(1,2) for filter in 2, == for one
hoi <- left_join(merge, names_robin_ncbi, by=c('gene' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_cluster_Bl.csv')
write.csv(hoi, cluster.file.name)
merge <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 2) # %in% c(1,3)) # %in% c=(1,2) for filter in 2, == for one
hoi <- left_join(merge, names_robin_ncbi, by=c('gene' = 'gene_ID_ncbi'))
cluster.file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_cluster_Ye.csv')
write.csv(hoi, cluster.file.name)
merge <-
my_gene_col %>%
rownames_to_column(var = "gene")
#first get rid of extra cols
names_robin_ncbi$start=NULL
names_robin_ncbi$end=NULL
new <-
my_gene_col %>%
rownames_to_column(var = "gene")
hoi2 <- left_join(names_robin_ncbi, new, by=c('gene' = 'gene_ID_ncbi'))
View(new)
hoi2 <- left_join(names_robin_ncbi, new, by=c('gene_ID_ncbi'= 'gene'))
file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_hierachical_clusters.csv')
write.csv(hoi2, file.name)
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
#
# Choose period
period = '12'
# Ultradian genes (period = 8h)
##
rhy <-
tbl(ejtk.db, paste0(sample.name,"_zscores_",period,'h')) %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# How many genes are rythmic?
length(rhy)
print(paste0("genes are rythmic expression during", period,"hours"))
## load zscore dataset
zscore.dat <- data.db %>% tbl(., paste0(sample.name,"_zscores")) %>% collect()
# Filter the zscores to keep only rhythmic genes
zscore.rhy <-
zscore.dat %>%
filter(gene_name %in% rhy) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.rhy) = zscore.rhy$gene_name
zscore.rhy <- as.matrix(zscore.rhy[-1])
# Hierarchical clustering of the genesets
my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
new <-
my_gene_col %>%
rownames_to_column(var = "gene")
#first get rid of extra cols
names_robin_ncbi <- read_csv("data/input/ophio_cflo/ophio_cflo_gene_names_robin_ncbi.csv")
names_robin_ncbi$start=NULL
names_robin_ncbi$end=NULL
hoi2 <- left_join(names_robin_ncbi, new, by=c('gene_ID_ncbi'= 'gene'))
file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_hierachical_clusters.csv')
write.csv(hoi2, file.name)
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
#
# Choose period
period = '24'
# Ultradian genes (period = 8h)
##
rhy <-
tbl(ejtk.db, paste0(sample.name,"_zscores_",period,'h')) %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# How many genes are rythmic?
length(rhy)
print(paste0("genes are rythmic expression during", period,"hours"))
## load zscore dataset
zscore.dat <- data.db %>% tbl(., paste0(sample.name,"_zscores")) %>% collect()
# Filter the zscores to keep only rhythmic genes
zscore.rhy <-
zscore.dat %>%
filter(gene_name %in% rhy) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.rhy) = zscore.rhy$gene_name
zscore.rhy <- as.matrix(zscore.rhy[-1])
# Hierarchical clustering of the genesets
my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 1, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
new <-
my_gene_col %>%
rownames_to_column(var = "gene")
#first get rid of extra cols
names_robin_ncbi <- read_csv("data/input/ophio_cflo/ophio_cflo_gene_names_robin_ncbi.csv")
names_robin_ncbi$start=NULL
names_robin_ncbi$end=NULL
hoi2 <- left_join(names_robin_ncbi, new, by=c('gene_ID_ncbi'= 'gene'))
file.name <- paste0('./results/temp_files/',sample.name,'_',period,'_hierachical_clusters.csv')
write.csv(hoi2, file.name)
