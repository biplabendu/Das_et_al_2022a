scale_x_discrete(limits = ordered_phases) +
coord_polar(theta = "x", direction = 1, start = 0.25) +
theme_Publication(base_size = 20) +
theme(# axis.title.x=element_blank(),
# axis.text.x=element_blank(),
legend.position = "none")
print(g)
###
### Phase plot ends
# MAKE THE SUPP FILE
if (nrow(gsoi.3[[i]])!=0) {
gsoi.3[[i]] <-
annots[[2]] %>%
select(gene_name, gene_desc, GOs, pfams, signalP, SSP, TMHMM) %>%
filter(gene_name %in% genes) %>% # change here
left_join(gsoi.3[[i]][,c(1,3)], by="gene_name") %>%  # change here
select(gene_name, gene_desc, enriched_annot=annot_desc, everything()) %>%
# mutate(enriched_annot=as.factor(enriched_annot)) %>%
arrange(enriched_annot)
} else {
gsoi.3[[i]] <-
annots[[2]] %>%
select(gene_name, gene_desc, GOs, pfams, signalP, SSP, TMHMM) %>%
filter(gene_name %in% genes) %>% # change here
mutate(annot_desc=NA) %>%
select(gene_name, gene_desc, enriched_annot=annot_desc, everything()) %>%
# mutate(enriched_annot=as.factor(enriched_annot)) %>%
arrange(enriched_annot)
}
}
## read the ocflo to okim homology data
ocflo.okim.homology <-
read.csv(paste0(path_to_repo, "/supplement/1_Supplementary_file_ophio_cflo_TC6_data.csv"),
header = T, stringsAsFactors = F) %>% as_tibble() %>%
select(ocflo_gene=gene_ID_ncbi, ophio_kim_homolog) %>%
left_join(ophio_kim_annots[1:2], by=c("ophio_kim_homolog"="sc16a_gene")) %>%
select(ocflo_gene, okim_gene=gene_name) %>%
na.omit() %>%
distinct()
# define gene sets for fisher's test
set1 <- unique(rhy[[2]]) # rhy24 in ocflo
set2 <- ocflo.okim.homology %>% filter(okim_gene %in% rhy24.okim) %>% pull(ocflo_gene) %>% unique() # rhy24 in okim
## Are the 24h-rhythmic genes in ocflo and okim similar?
fishers_overlap(set1,
set2,
bg.genes = max(length(expressed[[2]]), length(expressed.okim)))
## What is enriched in the 24h-rhythmic genes overlapping in Ocflo and Okim?
intersect(set1, set2) %>%
check_enrichment(.,
org = "ophio_cflo",
what = "pfams",
bg = "all", # because homologs are identified in the entire genome of the fungus, not only expressed genes!
expand = F)
# ## rhy-unique-ocflo
# # pfams1 <-
#   setdiff(set1, set2) %>%
#   check_enrichment(.,
#                    org = "ophio_cflo",
#                    what = "GOs", expand = F, verbose = T) %>% view()
## rhy-unique-okim
# pfams2 <-
setdiff(set2, set1) %>%
check_enrichment(.,
org = "ophio_cflo",
what = "pfams",
bg = "all", # because homologs are identified in the entire genome of the fungus, not only expressed genes!
expand = T) %>%
arrange(annot_desc)
# filter(annot_desc == "GMC_oxred_N; GMC_oxred_C")
# filter(annot_desc == "p450")
# filter(annot_desc == "FAD_binding_3")
# filter(annot_desc == "Kinase-like")
# filter(annot_desc == "Enterotoxin_a")
### NO SIGNIFICANT OVERLAP BETWEEN pfams1 and pfams2 (no overlapping pfams found; I checked.)
# setdiff(set1, ocflo.okim.homology %>% pull(ocflo_gene)) %>%
#   check_enrichment(.,
#                    org = "ophio_cflo",
#                    what = "pfams",
#                    bg = "all", # because homologs are identified in the entire genome of the fungus, not only expressed genes!
#                    expand = T) %>%
#   arrange(annot_desc)
clusters <- list()
for (i in 1:n_clusters) {
clusters[[i]] <- my_gene_col[[2]] %>% rownames_to_column("g") %>% filter(cluster==as.character(i)) %>% pull(g)
names(clusters)[[i]] <- paste0("Ocflo_24_cluster-",i)
}
overlaps <- list()
overlaps[[1]] <- intersect(set1,set2)
overlaps[[2]] <- setdiff(set1,set2) # rhy in Ocflo but not in Okim
overlaps[[3]] <- setdiff(set1, ocflo.okim.homology %>% pull(ocflo_gene)) # rhy in Ocflo but do not have an homolog in Okim
names(overlaps) <- c("rhy_in_both", "rhy_in_Ocflo_only", "rhy_in_Ocflo_no_homolog")
## Pairwise Fisher's exact test to check for sig. overlap
bg.genes <- expressed[[2]] %>% unique() %>% length() # all expressed genes in Ocflo
#### SAVE FIGURE ####
check_overlap(overlaps, clusters, bg.genes)
# sheet1
# all ocflo_annots file with okim homology, okim rhythmicity, ocflo rhythmicity data
gsoi.3[[5]] <-
ophio_cflo_annots %>%
## add okim homolog name, if exists (if not, NA)
left_join(ocflo.okim.homology, by=c("gene_name"="ocflo_gene")) %>%
select(ocflo_gene = gene_name, okim_homolog=okim_gene, everything()) %>%
## add ocflo_rhy_data (options: yes, NA)
mutate(rhy24_ocflo = ifelse(ocflo_gene %in% rhy[[2]], "yes",NA)) %>%
## add okim rhy data
mutate(rhy24_okim = ifelse(okim_homolog %in% rhy24.okim, "yes",NA)) %>%
arrange(rhy24_ocflo,rhy24_okim) %>%
select(ocflo_gene, okim_homolog, rhy24_ocflo, rhy24_okim, gene_desc, GOs:TMHMM,
ocflo_arb2_gene = arb2_gene, okim_sc16a_homolog = sc16a_homolog)
# sheets: 2 to 5
# genes in each cluster separately
for (i in 1:4) {
gsoi.3[[i]] <-
gsoi.3[[5]] %>%
filter(ocflo_gene %in% gsoi.3[[i]][[1]]) %>%
left_join(gsoi.3[[i]][,c(1,3)], by=c("ocflo_gene"="gene_name")) %>%
mutate(ocflo_24h_cluster = as.character(i)) %>%
select(-rhy24_ocflo) %>%
select(ocflo_24h_cluster, ocflo_gene:gene_desc, enriched_annot, everything()) %>%
arrange(enriched_annot, rhy24_okim)
}
## Save results of not_expressed genes into an excel file
supp <- list(
"ocflo_okim_homolog_rhy24" = gsoi.3[[5]],
"rhy24_ocflo_cluster1" = gsoi.3[[1]],
"rhy24_ocflo_cluster2" = gsoi.3[[2]],
"rhy24_ocflo_cluster3" = gsoi.3[[3]],
"rhy24_ocflo_cluster4" = gsoi.3[[4]]
)
writexl::write_xlsx(supp,
path = paste0(path_to_repo,"/results/00_supplementary_files/03_gsoi_rhy24_ocflo_okim.xlsx"
))
# update counter
counter <- counter+1
# ## rhy-unique-ocflo
# # pfams1 <-
setdiff(set1, set2) %>%
check_enrichment(.,
org = "ophio_cflo",
what = "pfams", expand = F, verbose = T) %>% view()
# ## rhy-unique-ocflo
# # pfams1 <-
setdiff(set1, set2) %>%
check_enrichment(.,
org = "ophio_cflo",
what = "pfams", expand = F, verbose = T)
counter
# Read the source file
homology.file <- "ophio_beau_homology.csv"
homology.file <-
paste0(path_to_repo, "/results/proteinortho/", homology.file) %>%
read.csv(., stringsAsFactors = F, na.strings = c(" ","","NA"))
# Clean the source file to keep distinct gene-gene homologs
homology.dat <-
homology.file %>%
# names() %>%
select(ophio_gene, beau_gene) %>%
na.omit() %>%
distinct() %>%
group_by(beau_gene) %>%
filter(n()==1) %>%
select(beau_gene, ophio_gene)
writeLines(paste("Of the", length(unique(ophio_cflo_annots[["gene_name"]])), "genes annotated in Ophio-cflo genome,",
"and", length(unique(beau_annots[["gene_name"]])), "genes annotated in Beau genome,\n",
nrow(distinct(homology.dat)), "genes show one-to-one orthology"))
for (i in 1:2){
# exp.dat <- expressed[[i]]
rhy.dat <- rhy[[i]]
ortho.dat <- homology.dat %>% pull(i)
listInput <- list(rhy.dat, ortho.dat)
names(listInput) <- c(paste0(sample.name[[i]],"_rhy24"),"is_an_ortholog")
library(UpSetR)
library(viridis)
# caste.col <- c("#F23030","#1A80D9")
upset(fromList(listInput),
number.angles = 0, point.size = 3, line.size = 1.5,
mainbar.y.label = "Number of overlapping genes",
sets.x.label = "Sig. rhy genes",
text.scale = c(1.5, # y-axis label ("# overlapping genes")
2, # y-axis tick labels ("1000, 2000,..")
1.5, # label for histogram ("sig. rhy genes")
1, # tick labels for histogram
1.5, # set names ("Cflo-brain_08h,..")
1.5),
sets = names(listInput),
nintersects = 15,
keep.order = T,
sets.bar.color = viridis(1),
# adding queries
query.legend = "bottom"
) %>%
print()
writeLines(paste0(
"The above plot shows that of the ", length(rhy.dat), " rhythmic genes in ", sample.name[[i]],
", how many has an 1:1 ortholog in the other fungal species. \n",
"Note, orthologous genes were identified using proteinortho "))
}
### Gene set of interest 4 ###
gsoi.4 <- list()
rhy.not.homolog <- list()
## loop starts
for(i in 1:2){
# save the names of genes
rhy.not.homolog[[i]] <- setdiff(rhy[[i]], homology.dat[[i]])
# run enrichment
gsoi.4[[i]] <-
rhy.not.homolog[[i]] %>%
check_enrichment(.,
org=sample.name[[i]],
expand = T,
what = "pfams") %>%
# nothing much to talk about things that have no annotations ---
filter(annot_desc!="no_desc") %>%
# save the results to a file
arrange(annot_desc)
# filter(annot_desc=="Enterotoxin_a") %>%
# pull(gene_name) %>%
# stacked.zplot_tc6(cond="ophio",plot.mean = F, bg.alpha = 0.5)
# print()
# MAKE THE SUPP FILE
gsoi.4[[i]] <-
annots[[i]] %>%
select(gene_name, gene_desc, GOs, pfams, signalP, SSP, TMHMM) %>%
filter(gene_name %in% rhy.not.homolog[[i]]) %>%  # change here
left_join(gsoi.4[[i]][,c(1,3)], by="gene_name") %>%  # change here
select(gene_name, gene_desc, enriched_annot=annot_desc, everything()) %>%
# mutate(enriched_annot=as.factor(enriched_annot)) %>%
arrange(enriched_annot)
}
## loop ends
## Save results of not_expressed genes into an excel file
supp <- list(
"rhy24_beau_no_ortholog" = gsoi.4[[1]],
"rhy24_ophio_no_ortholog" = gsoi.4[[2]])
writexl::write_xlsx(supp,
path = paste0(path_to_repo,
"/results/00_supplementary_files/04_gsoi_rhy24_beau_ophio_not_ortholog.xlsx"))
# update counter
counter <- counter+1
### Gene set of interest 4 ###
gsoi.4 <- list()
rhy.not.homolog <- list()
## loop starts
for(i in 1:2){
# save the names of genes
rhy.not.homolog[[i]] <- setdiff(rhy[[i]], homology.dat[[i]])
# run enrichment
gsoi.4[[i]] <-
rhy.not.homolog[[i]] %>%
check_enrichment(.,
org=sample.name[[i]],
bg = "all",
expand = T,
filter = T,
what = "pfams") %>%
# nothing much to talk about things that have no annotations ---
filter(annot_desc!="no_desc") %>%
# save the results to a file
arrange(annot_desc)
# filter(annot_desc=="Enterotoxin_a") %>%
# pull(gene_name) %>%
# stacked.zplot_tc6(cond="ophio",plot.mean = F, bg.alpha = 0.5)
# print()
# MAKE THE SUPP FILE
gsoi.4[[i]] <-
annots[[i]] %>%
select(gene_name, gene_desc, GOs, pfams, signalP, SSP, TMHMM) %>%
filter(gene_name %in% rhy.not.homolog[[i]]) %>%  # change here
left_join(gsoi.4[[i]][,c(1,3)], by="gene_name") %>%  # change here
select(gene_name, gene_desc, enriched_annot=annot_desc, everything()) %>%
# mutate(enriched_annot=as.factor(enriched_annot)) %>%
arrange(enriched_annot)
}
## loop ends
## Save results of not_expressed genes into an excel file
supp <- list(
"rhy24_beau_no_ortholog" = gsoi.4[[1]],
"rhy24_ophio_no_ortholog" = gsoi.4[[2]])
writexl::write_xlsx(supp,
path = paste0(path_to_repo,
"/results/00_supplementary_files/04_gsoi_rhy24_beau_ophio_not_ortholog.xlsx"))
rhy.homology.dat <-
homology.dat %>%
filter(beau_gene %in% rhy[[1]] | ophio_gene %in% rhy[[2]])
homology.dat
writeLines(paste0(
"The above plot shows that of the ", length(rhy.dat), " rhythmic genes in ", sample.name[[i]],
", how many has an 1:1 ortholog in the other fungal species. \n",
"Note, orthologous genes were identified using proteinortho "))
# Read the source file
homology.file <- "ophio_beau_homology.csv"
homology.file <-
paste0(path_to_repo, "/results/proteinortho/", homology.file) %>%
read.csv(., stringsAsFactors = F, na.strings = c(" ","","NA"))
# Clean the source file to keep distinct gene-gene homologs
homology.dat <-
homology.file %>%
# names() %>%
select(ophio_gene, beau_gene) %>%
na.omit() %>%
distinct() %>%
group_by(beau_gene) %>%
filter(n()==1) %>%
select(beau_gene, ophio_gene)
writeLines(paste("Of the", length(unique(ophio_cflo_annots[["gene_name"]])), "genes annotated in Ophio-cflo genome,",
"and", length(unique(beau_annots[["gene_name"]])), "genes annotated in Beau genome,\n",
nrow(distinct(homology.dat)), "genes show one-to-one orthology"))
1171/5274
1872/9006
701/1872
list.of.gos <- c(metabolic_process = c("GO:0008152", "GO:0044236", "GO:0044710"),
adaptive_thermogenesis = c("GO:1990845"),
antibiotic_metabolic_process = "GO:0016999")
list.of.gos
list.of.gos %>% class()
rm(list.of.gos)
metabolism.gos <- c(metabolic_process = c("GO:0008152", "GO:0044236", "GO:0044710"),
adaptive_thermogenesis = c("GO:1990845"),
antibiotic_metabolic_process = "GO:0016999",
ATP_metabolic_process = "GO:0046034",
biosynthetic_process = c("GO:0009058", "GO:0044274", "GO:0044711"),
catabolic_process = c("GO:0009056", "GO:0044243", "GO:0044712"),
cellular_metabolic_process = "GO:0044237",
collagen_biosynthesis = "GO:0032964",
collagen_catabolic_process = "GO:0030574",
hormone_biosynthetic_process = "GO:0042446",
hormone_catabolic_process = "GO:0042447",
negative_regulation_of_hormone_metabolism = "GO:0032351",
positive_regulation_of_hormone_metabolism = "GO:0032352",
peptide_hormone_processing = "GO:0016486",
regulation_of_hormone_metabolism = "GO:0032350",
insulin_processing = "GO:0030070",
pheromone_metabolism = "GO:0042810",
carbohydrate_utilization = "GO:0009758")
locomotion.gos <- c(cell_motility = "GO:0048870",
directional_locomotion = "GO:0033058",
flight = "GO:0060361",
locomotory_behavior = c("GO:0031987", "GO:0007626"),
regulation_of_locomotion = "GO:0040012",
multicellular_organismal_locomotion = "GO:0071965",
negative_regulation_of_locomotion = "GO:0040013",
positive_regulation_of_locomotion = "GO:0040017",
taxis = "GO:0042330"
)
immune.gos <- c(immune_system_process = "GO:0002376",
activation_of_immune_response = "GO:0002253",
negative_regulation_of_immune_system = "GO:0002683",
positive_regulation_of_immune_system = "GO:0002684",
regulation_of_immune_system = "GO:0002682",
immune_effector_process = "GO:0002252",
# Any process of the immune system that executes a component of an immune response. An effector immune process takes place after its activation.
immune_response = "GO:0006955",
immunological_memory_process = "GO:0090713",
tolerance_induction = "GO:0002507",
detoxification = "GO:0098754",
toxin_catabolic_process = "GO:0009407",
xenobiotic_detoxification = c("GO:0140330", "GO:1990961"),
nitrogen_utilization = "GO:0019740")
interspecies.gos <- c(interspecies_interaction = c("GO:0044419", "GO:0051703"),
biological_regulation = "GO:0065007",
regulation_of_biological_quality = "GO:0065008",
signaling = c("GO:0023052", "GO:0023046", "GO:0044700"),
viral_process = c("GO:0016032", "GO:0022415"))
behavior.gos <- c(behavior = c("GO:0007610", "GO:0044708"),
rhythmic_behavior = "GO:0007622",
social_behavior = "GO:0035176",
thermosensory_behavior = "GO:0040040",
visual_behavior = "GO:0007632",
aggressive_behavior = "GO:0002118",
behavioral_defense_response = "GO:0002209",
behavioral_response_to_nutrient = "GO:0051780",
response_to_water_deprivation = "GO:0042630",
chemosensory_behavior = "GO:0007635",
olfactory_behavior = "GO:0042048",
exploration_behavior = "GO:0035640",
feeding_behavior = c("GO:0007631", "GO:0044366", "GO:0044367", "GO:0044368",
"GO:0044369", "GO:0044370", "GO:0044371", "GO:0044372"),
foraging_behavior = c("GO:0060756"),
grooming_behavior = c("GO:0007625"),
host_seeking_behavior = "GO:0032537",
learning_memory = "GO:0007611",
mechanosensory_behavior = "GO:0007638",
response_to_stimulus = c("GO:0050896", "GO:0051869"),
motor_behavior = "GO:0061744",
negative_regulation_of_behavior = "GO:0048521",
positive_regulation_of_behavior = "GO:0048520",
regulation_of_behavior = "GO:0050795",
reproductive_behavior = "GO:0019098",
reproduction = c("GO:0000003", "GO:0019952", "GO:0050876"),
rhythmic_process = "GO:0048511")
list.of.gos <- list("metabolism" = metabolism.gos,)
list.of.gos <- list("metabolism" = metabolism.gos)
list.of.gos
list.of.gos <- list("metabolism_gos" = metabolism.gos,
"locomotion_gos" = locomotion.gos,
"immune_gos" = immune.gos,
"interspecies_gos" = interspecies.gos,
"behavior_gos" = behavior.gos)
names(list.of.gos)
names(list.of.gos)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
## For more inspiration on customizing the html output, refer to the following:
# https://bookdown.org/yihui/rmarkdown/html-document.html#table-of-contents
set.seed(420)
rm(list = ls())
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, WGCNA, igraph)
pacman::p_load(patchwork)
library(timecourseRnaseq)
#' set conflict preference
conflict_prefer("select", "dplyr", quiet = T)
conflict_prefer("filter", "dplyr", quiet = T)
conflict_prefer("layout", "plotly", quiet = T)
conflict_prefer("hclust", "flashClust", quiet = T)
#' set path to your working directory
path_to_repo = "/Users/biplabendudas/Documents/GitHub/Das_et_al_2022a"
#' load functions
# customized theme for publication quality figures
source(paste0(path_to_repo,"/functions/theme_publication.R"))
# function to perform enrichment analysis
# source(paste0(path_to_repo,"/functions/enrichment_analysis.R"))
# function to plot z-scores (Cflo genes only)
source(paste0(path_to_repo,"/functions/plot_zscores.R"))
## List of metabolic processes (only top level metabolic process GO terms)
# source: http://www.informatics.jax.org/vocab/gene_ontology/GO:0008150
metabolism.gos <- c(metabolic_process = c("GO:0008152", "GO:0044236", "GO:0044710"),
adaptive_thermogenesis = c("GO:1990845"),
antibiotic_metabolic_process = "GO:0016999",
ATP_metabolic_process = "GO:0046034",
biosynthetic_process = c("GO:0009058", "GO:0044274", "GO:0044711"),
catabolic_process = c("GO:0009056", "GO:0044243", "GO:0044712"),
cellular_metabolic_process = "GO:0044237",
collagen_biosynthesis = "GO:0032964",
collagen_catabolic_process = "GO:0030574",
hormone_biosynthetic_process = "GO:0042446",
hormone_catabolic_process = "GO:0042447",
negative_regulation_of_hormone_metabolism = "GO:0032351",
positive_regulation_of_hormone_metabolism = "GO:0032352",
peptide_hormone_processing = "GO:0016486",
regulation_of_hormone_metabolism = "GO:0032350",
insulin_processing = "GO:0030070",
pheromone_metabolism = "GO:0042810",
carbohydrate_utilization = "GO:0009758")
locomotion.gos <- c(cell_motility = "GO:0048870",
directional_locomotion = "GO:0033058",
flight = "GO:0060361",
locomotory_behavior = c("GO:0031987", "GO:0007626"),
regulation_of_locomotion = "GO:0040012",
multicellular_organismal_locomotion = "GO:0071965",
negative_regulation_of_locomotion = "GO:0040013",
positive_regulation_of_locomotion = "GO:0040017",
taxis = "GO:0042330"
)
immune.gos <- c(immune_system_process = "GO:0002376",
activation_of_immune_response = "GO:0002253",
negative_regulation_of_immune_system = "GO:0002683",
positive_regulation_of_immune_system = "GO:0002684",
regulation_of_immune_system = "GO:0002682",
immune_effector_process = "GO:0002252",
# Any process of the immune system that executes a component of an immune response. An effector immune process takes place after its activation.
immune_response = "GO:0006955",
immunological_memory_process = "GO:0090713",
tolerance_induction = "GO:0002507",
detoxification = "GO:0098754",
toxin_catabolic_process = "GO:0009407",
xenobiotic_detoxification = c("GO:0140330", "GO:1990961"),
nitrogen_utilization = "GO:0019740")
interspecies.gos <- c(interspecies_interaction = c("GO:0044419", "GO:0051703"),
biological_regulation = "GO:0065007",
regulation_of_biological_quality = "GO:0065008",
signaling = c("GO:0023052", "GO:0023046", "GO:0044700"),
viral_process = c("GO:0016032", "GO:0022415"))
behavior.gos <- c(behavior = c("GO:0007610", "GO:0044708"),
rhythmic_behavior = "GO:0007622",
social_behavior = "GO:0035176",
thermosensory_behavior = "GO:0040040",
visual_behavior = "GO:0007632",
aggressive_behavior = "GO:0002118",
behavioral_defense_response = "GO:0002209",
behavioral_response_to_nutrient = "GO:0051780",
response_to_water_deprivation = "GO:0042630",
chemosensory_behavior = "GO:0007635",
olfactory_behavior = "GO:0042048",
exploration_behavior = "GO:0035640",
feeding_behavior = c("GO:0007631", "GO:0044366", "GO:0044367", "GO:0044368",
"GO:0044369", "GO:0044370", "GO:0044371", "GO:0044372"),
foraging_behavior = c("GO:0060756"),
grooming_behavior = c("GO:0007625"),
host_seeking_behavior = "GO:0032537",
learning_memory = "GO:0007611",
mechanosensory_behavior = "GO:0007638",
response_to_stimulus = c("GO:0050896", "GO:0051869"),
motor_behavior = "GO:0061744",
negative_regulation_of_behavior = "GO:0048521",
positive_regulation_of_behavior = "GO:0048520",
regulation_of_behavior = "GO:0050795",
reproductive_behavior = "GO:0019098",
reproduction = c("GO:0000003", "GO:0019952", "GO:0050876"),
rhythmic_process = "GO:0048511")
gut.microbiota.gos <- c(sulfur_metabolism = "GO:0006790",
sulfur_amino_acid_metabolism = "GO:0000096",
regulation_of_sulfur_metabolism = "GO:0042762",
negative_regulation_of_sulfur_metabolism = "GO:0051175",
positive_regulation_of_sulfur_metabolism = "GO:0051176")
list.of.gos <- list("metabolism_gos" = metabolism.gos,
"locomotion_gos" = locomotion.gos,
"immune_gos" = immune.gos,
"interspecies_gos" = interspecies.gos,
"behavior_gos" = behavior.gos)
