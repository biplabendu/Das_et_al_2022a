my_hclust_gene <- hclust(dist(zscore.rhy), method = "complete")
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 2) # k=  clusters
my_gene_col <- data.frame(cluster = my_gene_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.rhy)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(40,60)])
# Color scale
my.breaks = seq(min(zscore.rhy), max(zscore.rhy), by=0.1)
# Let's plot!
rhy.heat <-
pheatmap(zscore.rhy, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 2, # OG was 4
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
# To save the heatmap to a pdf, run this code. For this to work make sure the heatmap is stored in the variable rhy.heat
save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
name.path.file <- paste0('./results/heatmap/rhy_heatmap_',sample.name,'_',period,'h_2clusters.pdf')
save_pheatmap_pdf(rhy.heat, name.path.file)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# 00. Load Databases -----------------------------------------------------------
#
# 1. TC7_ejtk.db
# Desc: This database contains all ejtk-output for TC7
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC7_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
sample.name = "ophio_cflo"
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
tbl(data.db, “beau_fpkm”) %>% collect() %>% view()
src_dbi(data.db)
tbl(data.db, 'beau_fpkm') %>% collect() %>% view()
tbl(data.db, 'ophio_cflo_fpkm') %>% collect() %>% view()
tbl(data.db, 'beau_fpkm') %>% collect() %>% view()
tbl(data.db, 'ophio_cflo_fpkm') %>% collect() %>% view()
tbl(data.db, 'beau_log2fpkm') %>% collect() %>% view()
tbl(data.db, 'beau_expressed_genes') %>% collect() %>% view()
tbl(data.db, 'ophio_cflo_fpkm') %>% collect() %>% view()
tbl(data.db, 'beau_expressed_genes') %>% collect() %>% view()
tbl(data.db, 'beau_zscores') %>% collect() %>% view()
dbRemoveTable(data.db, 'beau_fpkm')
src_dbi(data.db)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# h. ophio_kim_DD_zscores
# i. ophio_kim_expressed_genes
# j. ophio_kim_fpkm
# k. ophio_kim_log2fpkm
# l. ophio_kim_zscores
# m. beau_expressed_genes
# n. beau_fpkm
# o. beau_log2fpkm
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
beau <- read.csv("./results/normalized_gene_exp/raw_fpkm/beau/TC6_gene_exp.csv",
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
#
#
## python csv has addiotional cols (index, gene_id, and locus)
## so we romove those cols first
beau$gene_id <- NULL
beau$X <- NULL
beau$locus <- NULL
## The python csv also has other colnames for the samples (nl sample_* vs ZT*)
## First extract right colnames from ocflo DF
new.col.names <- colnames(o.cflo)
## The python csv also has other colnames for the samples (nl sample_* vs ZT*)
## First extract right colnames from ocflo DF
new.col.names <- colnames(o.cflo)
### CVS made with pyhton is diffrent than the one made with R, so we going to transform the python csv to the same format as the R csv
# load tho look at how the file should be structured
o.cflo <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_cflo/normalized_gene_exp_ophio_cflo_all_samples.csv")
## The python csv also has other colnames for the samples (nl sample_* vs ZT*)
## First extract right colnames from ocflo DF
new.col.names <- colnames(o.cflo)
## change the colnames of beau DF
colnames(beau) <- new.col.names
# Save file to database
dbWriteTable(my.db, "beau_fpkm", beau)
# check if table is added in the database (by checking all tables)
src_dbi(my.db)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis, ggthemes)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# 00. Load Databases -----------------------------------------------------------
#
# 1. TC7_ejtk.db
# Desc: This database contains all ejtk-output for TC7
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC7_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
sample.name = "beau"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
tbl(ejtk.db, 'beau_zscores_08h') %>% collect() %>% view()
View(data.db)
tbl(ejtk.db, 'beau_zscores_12h') %>% collect() %>% view()
tbl(ejtk.db, 'ophio_cflo_12h') %>% collect() %>% view()
tbl(ejtk.db, 'ophio_cflo_zscores_12h') %>% collect() %>% view()
sample.name = "ophio_cflo"
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, paste0(sample.name ,"_fpkm")) %>%
collect() %>%
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
print(not.expressed)
getwd()
setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2/Das_et_al_2022a/results")
setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2/Das_et_al_2022a")
write(not.expressed, file = './results/list_not_expressed.txt', sep = " ")
DB_name_NCBI <-
path <- paste0('Das_et_al_2022a/data/input/',{species_name},'/')
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <-
path <- paste0('Das_et_al_2022a/data/input/',{species_name},'/')
file_name <- past0({DB_name_Robin},'.genes.gff3')
file_name <- paste0({DB_name_Robin},'.genes.gff3')
read
path+file_name
cbind(path,file_name)
c(path,file_name)
paste(path,file_name)
paste0(path,file_name)
glue(path,file_name)
path_NCBI <- paste0('Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = T, stringsAsFactors = F)
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = T, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = T, stringsAsFactors = F)
getwd()
setwd("~/Dropbox/Ant-fungus/02_git/Git_Das_folder2")
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
```
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
Read the two gff files - one from Robin and the other from NCBI
```{r}
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = T, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = T, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = T, stringsAsFactors = F)
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
View(ophio_cflo_gff_robin)
ophio_cflo_gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', skip = 1, header = F, nrows = 7, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', skip = 1, header = F, nrows = 1, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', skip = 1, header = F, nrows = 1, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', skip = 1, header = F, nrows = 1, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, nrows = 1, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, nrows = 1, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, nrows = 1, stringsAsFactors = F)
ophio_cflo_gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
View(ophio_cflo_gff_ncbi)
View(ophio_cflo_gff_ncbi)
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
gff_robin <- read.csv(path_R, sep = '\t', header = col_names, stringsAsFactors = F)
gff_robin <- read.csv(path_R, sep = '\t', header = F, colnames = col_names, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
colnames(col_names)
colnames(gff_robin) <- col_names
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes') %>%
colnames(gff_robin)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes') %>%
colnames(gff_robin)
colnames(gff_ncbi) <- col_names
colnames(gff_robin) <- col_names
# load libraries
library(tidyverse)
gff_robin <- gff_robin %>%
filter(feature == "gene") %>%
select(start, end, attributes_robin = attributes)
gff_ncbi <- gff_ncbi %>%
filter(feature == "gene") %>%
select(start, end, attributes_ncbi = attributes)
head(ophio_cflo_gff_robin)
head(gff_robin)
head(gff_ncbi)
# initial split
foo <- gff_robin %>%
separate(attributes_robin, c("a","b"), "=", extra = "merge")
# final split to obtain only the gene names
gff_robin$attributes_robin <- unlist(strsplit(foo$b,"|gene",4))
gff_ncbi <-
gff_ncbi %>%
separate(attributes_ncbi, c("a","b","c"), ";", extra = "merge") %>%
select(-c(a,c)) %>%
separate(b, c("b","c"), "=", extra = "merge") %>%
select(start, end, attributes_ncbi=c)
gff_robin_ncbi <-
gff_robin %>%
full_join(gff_ncbi)
# SAVE THE FILE
file_name <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_gene_names_robin_ncbi.csv')
write.csv(gff_robin_ncbi,
file = file_name,
row.names = F)
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
species_name <- 'beau'
DB_name_Robin <- 'Beaba1'
DB_name_NCBI <- 'ARSEF2860'
path_R <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/', {DB_name_Robin},'.genes.gff3')
path_NCBI <- paste0('./Das_et_al_2022a/data/input/',{species_name},'/',{species_name},'_',{DB_name_NCBI},'_genome.gff')
Read the two gff files
* one from Robin (can be downloaded at: .. )
```{r}
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
gff_robin <- read.csv(path_R, sep = '\t', header = F, stringsAsFactors = F)
* the other from NCBI (can be downloaded)
This file has to be edited to work. The lines that start with a '#' are removed. This can be done with the following command line code (bash) or manually
```bash
file='give_file_name'
awk -F '\t' -v OFS=, '!/^#/ {$1=$1;print}' ${file}.gff > ${file}.csv;
```
Then read the file in
```{r}
gff_ncbi <- read.csv(path_NCBI, sep = '\t', header = F, stringsAsFactors = F)
```
And name the columns
```{r}
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
colnames(gff_robin) <- col_names
colnames(gff_ncbi) <- col_names
Step one:
- Filter and keep only the rows with feature=="gene"
- Select only the "start", "end", and "attributes" column
```{r}
# load libraries
library(tidyverse)
gff_robin <- gff_robin %>%
filter(feature == "gene") %>%
select(start, end, attributes_robin = attributes)
gff_ncbi <- gff_ncbi %>%
filter(feature == "gene") %>%
select(start, end, attributes_ncbi = attributes)
Check to see if your code worked!
```{r}
head(gff_robin)
head(gff_ncbi)
Step two:
- Clean the attributes column to retain only the gene names
```{r}
getwd()
# ## Cleaning the Ophio_kim annotation file
#
# foo <- read.csv("./Das_et_al_2022a/results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin.csv",
#                 header = T,
#                 stringsAsFactors = F)
#
library(tidyverse)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = F, stringsAsFactors = F)
col_names <- c('seqname','source','feature','start','end','score','strand','frame','attributes')
colnames(foo) <- col_names
bar <- read.csv("./data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("gene_name" = "attributes_robin")) %>%
select(gene_name,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_ncbi.csv",
row.names = F)
print(colnames(foo[1]))
colnames(foo[1]) <- 'gene_name'
colnames(foo[1]) <- 'gene_name'
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(gene_name,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_ncbi.csv",
row.names = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./beau_annots_robin_ncbi.csv",
row.names = F)
## Add the ncbi gene names to the annotation file
foo <- read.csv("./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt",
sep = '\t', header = T, stringsAsFactors = F)
bar <- read.csv("./Das_et_al_2022a/data/input/beau/beau_gene_names_robin_ncbi.csv",
header = T, stringsAsFactors = F)
foo %>%
left_join(bar[,(3:4)], by=c("ProteinID" = "attributes_robin")) %>%
select(ProteinID,
gene_name_ncbi=attributes_ncbi,
everything()) %>%
write.csv(.,
file = "./beau_annots_robin_ncbi.csv",
row.names = F)
getwd()
foo <- read.csv('./Das_et_al_2022a/data/input/beau/Beaba1.summary.txt',
header = T,
sep = '\t',
stringsAsFactors = F)
library(tidyverse)
protein_name <- character()
for (i in 1:nrow(foo)) {
protein_name[i] <- str_split(foo$ProteinId.t1, ".t1")[[i]][1]
}
protein_name <- character()
for (i in 1:nrow(foo)) {
protein_name[i] <- str_split(foo$ProteinID.t1, ".t1")[[i]][1]
}
foo[1] <- protein_name
foo %>%
select(gene_name=ProteinId.t1,
GOs=GO.annotation..terminal.nodes.only.,
pfams=PFAM.annotation,
signalP=SignalP.SmallSecretedProteins,
TMHMM=Transmembrane.domains,
sc16a_ccl_up_down=SC16a....CcL..Up.Down,
sc16a_ccd_up_down=SC16a....CcD..Up.Down,
ccl_ccd_up_down=CcL....CcD..Up.Down) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_cleaned.csv",
row.names = F)
foo %>%
select(gene_name=ProteinID.t1,
GOs=GO.annotation..terminal.nodes.only.,
pfams=PFAM.annotation,
signalP=SignalP.SmallSecretedProteins,
TMHMM=Transmembrane.domains,
sc16a_ccl_up_down=SC16a....CcL..Up.Down,
sc16a_ccd_up_down=SC16a....CcD..Up.Down,
ccl_ccd_up_down=CcL....CcD..Up.Down) %>%
write.csv(.,
file = "./results/normalized_gene_exp/ophio_kim/ophio_kim_annots_robin_cleaned.csv",
row.names = F)
