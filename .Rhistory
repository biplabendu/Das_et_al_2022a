what = which.test,
clean = T,
expand = T,
plot = F)
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module))
s
for (i in 1:length(module)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null")
}
}
paste(which.labels[[i]],"is null") %>% print()
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
}
}
module_pfams <- list()
bg.genes <- dat[[1]] ## all genes used to make the network
for (i in 1:length(which.labels)) {
# get name of the module
m <- which.labels[[i]]
which.test <- "pfams"
# save the enrichment results
module_pfams[[i]] <-
module_genes[[m]] %>%
check_enrichment(.,
bg = dat[[1]],
what = which.test,
clean = T,
expand = T,
plot = F)
}
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
}
if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble")
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
}
}
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
} else {
if(i==1) {
module.pfams <- module_pfams[[i]]
} else {
module.pfams <- rbind(module.pfams, module_pfams[[i]])
}
}
}
## check the output data frame
module.pfams %>% head()
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc)
# check the output dataframe
module.pfams
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc) %>%
filter(enriched_in_module!="no_desc")
## Now clean it up
sapply(module_pfams, nrow)
for (i in 1:length(module_pfams)) {
if(is.null(nrow(module_pfams[[i]]))) {
paste(which.labels[[i]],"is null") %>% print()
} else if(nrow(module_pfams[[i]])==0) {
paste(which.labels[[i]], "is an empty tibble") %>% print()
} else {
if(i==1) {
module.pfams <- module_pfams[[i]]
} else {
module.pfams <- rbind(module.pfams, module_pfams[[i]])
}
}
}
## change the name of the column
module.pfams <-
module.pfams %>%
select(gene_name, enriched_in_module=annot_desc) %>%
filter(enriched_in_module!="no_desc")
# check the output dataframe
module.pfams
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name")
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns
select(module_identity, kTotal, enriched_in_module, everything())
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, kTotal, enriched_in_module)
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, kTotal, desc(enriched_in_module))
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, desc(kTotal), desc(enriched_in_module))
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, desc(kTotal), enriched_in_module)
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module, everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## Geneset: "rhy24-Ocflo-Okim"
mutate(rhy_ocflo_okim = ifelse(gene_name %in% gois.tc6[[2]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster3"
mutate(rhy_ocflo_beau_cluster3 = ifelse(gene_name %in% gois.tc6[[3]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster4"
mutate(rhy_ocflo_beau_cluster4 = ifelse(gene_name %in% gois.tc6[[4]], "yes", "no")) %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module,
gene_name, gene_desc,
rhy_ocflo_okim, rhy_ocflo_beau_cluster3, rhy_ocflo_beau_cluster4,
everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn
## export it
write.csv(results.gcn,
file = paste0(path_to_repo, "/results/00_supplementary_files/07_Ocflo_GCN_results.csv"),
row.names = F)
# Calculate the connectivities of the genes
Alldegrees1=intramodularConnectivity(adjMat = adj_matrix, colors = colorh1)
Alldegrees1 %>%
rownames_to_column("gene_name") %>%
mutate_at(vars(starts_with("k")),
function(x){
round(x,2)
})
Alldegrees1 <-
Alldegrees1 %>%
rownames_to_column("gene_name") %>%
mutate_at(vars(starts_with("k")),
function(x){
round(x,2)
})
head(Alldegrees1)
results.gcn <-
ocflo.control.mods %>%
pull(gene_name) %>%
## rhythmicity data
TC6_annotator() %>%
select(gene_name = ophio_gene, everything()) %>%
## cluster identity
left_join(ocflo.control.mods, by="gene_name") %>%
## add total connectivity data
left_join(Alldegrees1 %>% select(gene_name,kTotal), by="gene_name") %>%
## add the enriched pfam
left_join(module.pfams, by="gene_name") %>%
## Geneset: "rhy24-Ocflo-Okim"
mutate(rhy_ocflo_okim = ifelse(gene_name %in% gois.tc6[[2]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster3"
mutate(rhy_ocflo_beau_cluster3 = ifelse(gene_name %in% gois.tc6[[3]], "yes", "no")) %>%
## Geneset: "rhy24-Ocflo|Beau-cluster4"
mutate(rhy_ocflo_beau_cluster4 = ifelse(gene_name %in% gois.tc6[[4]], "yes", "no")) %>%
## order the columns and rows
select(module_identity, kTotal, enriched_in_module,
gene_name, gene_desc,
rhy_ocflo_okim, rhy_ocflo_beau_cluster3, rhy_ocflo_beau_cluster4,
everything()) %>%
arrange(module_identity, enriched_in_module, desc(kTotal))
results.gcn
## export it
write.csv(results.gcn,
file = paste0(path_to_repo, "/results/00_supplementary_files/07_Ocflo_GCN_results.csv"),
row.names = F)
results.gcn %>%
head()
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(ophio_gene) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>%
## run stacked zplots
pull(gene_name) %>%
stacked.zplot_tc6(plot.mean = F, bg.alpha = 0.8, bg.lwd=1.5)
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(gene_name) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>%
## run stacked zplots
pull(gene_name) %>%
stacked.zplot_tc6(plot.mean = F, bg.alpha = 0.8, bg.lwd=1.5)
rm(dissTOM)
results.gcn %>%
filter(module_identity=="OC1") %>% length()
set.seed(420)
set.seed(420)
#' Load the libraries
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted, WGCNA, igraph)
pacman::p_load(patchwork)
pacman::p_load(GeneOverlap)
library(timecourseRnaseq)
#' set conflict preference
conflict_prefer("select", "dplyr", quiet = T)
conflict_prefer("filter", "dplyr", quiet = T)
conflict_prefer("layout", "plotly", quiet = T)
conflict_prefer("hclust", "flashClust", quiet = T)
#' set path to your working directory
path_to_repo = "/Users/biplabendudas/Documents/GitHub/Das_et_al_2022a"
#' load functions
# customized theme for publication quality figures
source(paste0(path_to_repo,"/functions/theme_publication.R"))
# function to perform enrichment analysis
source(paste0(path_to_repo,"/functions/enrichment_analysis.R"))
# function to plot z-scores (Cflo genes only)
source(paste0(path_to_repo,"/functions/plot_zscores.R"))
## List of metabolic processes (only top level metabolic process GO terms)
# source: http://www.informatics.jax.org/vocab/gene_ontology/GO:0008150
metabolism.gos <- c(metabolic_process = c("GO:0008152", "GO:0044236", "GO:0044710"),
adaptive_thermogenesis = c("GO:1990845"),
antibiotic_metabolic_process = "GO:0016999",
ATP_metabolic_process = "GO:0046034",
biosynthetic_process = c("GO:0009058", "GO:0044274", "GO:0044711"),
catabolic_process = c("GO:0009056", "GO:0044243", "GO:0044712"),
cellular_metabolic_process = "GO:0044237",
collagen_biosynthesis = "GO:0032964",
collagen_catabolic_process = "GO:0030574",
hormone_biosynthetic_process = "GO:0042446",
hormone_catabolic_process = "GO:0042447",
negative_regulation_of_hormone_metabolism = "GO:0032351",
positive_regulation_of_hormone_metabolism = "GO:0032352",
peptide_hormone_processing = "GO:0016486",
regulation_of_hormone_metabolism = "GO:0032350",
insulin_processing = "GO:0030070",
pheromone_metabolism = "GO:0042810",
carbohydrate_utilization = "GO:0009758")
locomotion.gos <- c(cell_motility = "GO:0048870",
directional_locomotion = "GO:0033058",
flight = "GO:0060361",
locomotory_behavior = c("GO:0031987", "GO:0007626"),
regulation_of_locomotion = "GO:0040012",
multicellular_organismal_locomotion = "GO:0071965",
negative_regulation_of_locomotion = "GO:0040013",
positive_regulation_of_locomotion = "GO:0040017",
taxis = "GO:0042330"
)
immune.gos <- c(immune_system_process = "GO:0002376",
activation_of_immune_response = "GO:0002253",
negative_regulation_of_immune_system = "GO:0002683",
positive_regulation_of_immune_system = "GO:0002684",
regulation_of_immune_system = "GO:0002682",
immune_effector_process = "GO:0002252",
# Any process of the immune system that executes a component of an immune response. An effector immune process takes place after its activation.
immune_response = "GO:0006955",
immunological_memory_process = "GO:0090713",
tolerance_induction = "GO:0002507",
detoxification = "GO:0098754",
toxin_catabolic_process = "GO:0009407",
xenobiotic_detoxification = c("GO:0140330", "GO:1990961"),
nitrogen_utilization = "GO:0019740")
interspecies.gos <- c(interspecies_interaction = c("GO:0044419", "GO:0051703"),
biological_regulation = "GO:0065007",
regulation_of_biological_quality = "GO:0065008",
signaling = c("GO:0023052", "GO:0023046", "GO:0044700"),
viral_process = c("GO:0016032", "GO:0022415"))
behavior.gos <- c(behavior = c("GO:0007610", "GO:0044708"),
rhythmic_behavior = "GO:0007622",
social_behavior = "GO:0035176",
thermosensory_behavior = "GO:0040040",
visual_behavior = "GO:0007632",
aggressive_behavior = "GO:0002118",
behavioral_defense_response = "GO:0002209",
behavioral_response_to_nutrient = "GO:0051780",
response_to_water_deprivation = "GO:0042630",
chemosensory_behavior = "GO:0007635",
olfactory_behavior = "GO:0042048",
exploration_behavior = "GO:0035640",
feeding_behavior = c("GO:0007631", "GO:0044366", "GO:0044367", "GO:0044368",
"GO:0044369", "GO:0044370", "GO:0044371", "GO:0044372"),
foraging_behavior = c("GO:0060756"),
grooming_behavior = c("GO:0007625"),
host_seeking_behavior = "GO:0032537",
learning_memory = "GO:0007611",
mechanosensory_behavior = "GO:0007638",
response_to_stimulus = c("GO:0050896", "GO:0051869"),
motor_behavior = "GO:0061744",
negative_regulation_of_behavior = "GO:0048521",
positive_regulation_of_behavior = "GO:0048520",
regulation_of_behavior = "GO:0050795",
reproductive_behavior = "GO:0019098",
reproduction = c("GO:0000003", "GO:0019952", "GO:0050876"),
rhythmic_process = "GO:0048511")
gut.microbiota.gos <- c(sulfur_metabolism = "GO:0006790",
sulfur_amino_acid_metabolism = "GO:0000096",
regulation_of_sulfur_metabolism = "GO:0042762",
negative_regulation_of_sulfur_metabolism = "GO:0051175",
positive_regulation_of_sulfur_metabolism = "GO:0051176")
list.of.gos <- list("metabolism_gos" = metabolism.gos,
"locomotion_gos" = locomotion.gos,
"immune_gos" = immune.gos,
"interspecies_gos" = interspecies.gos,
"behavior_gos" = behavior.gos)
results.gcn %>%
filter(module_identity=="OC1") %>% length()
results.gcn
results.gcn %>%
filter(module_identity=="OC1") %>% nrow
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
filter(inf_v_control=="up" & control_rhy24=="yes") %>% nrow
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
filter(inf_v_control=="up" & control_rhy24=="yes") %>%
# filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(gene_name) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>% view()
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>% length()
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>% nrow
results.gcn %>%
filter(module_identity=="OC1") %>%
# ## summarize the results
# group_by(inf_v_control, control_rhy24) %>%
# summarize(n()) %>%
## pull rhythmic genes that are up/down-regulated
# filter(inf_v_control=="up" & control_rhy24=="yes") %>%
filter(inf_v_control=="down" & control_rhy24=="yes") %>%
## run enrichments
pull(gene_name) %>%
check_enrichment(.,
bg = dat[[1]],
what = "pfams",
clean = T,
expand = T) %>% view()
