# zscore-log2-expression --------------------------------------------------
# z-score the data
gene.names <- log2.o.kim %>% pull(gene_name)
sample.names <- names(log2.o.kim[-1])
zscores.o.kim <- log2.o.kim %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.kim) <- sample.names
zscores.o.kim$gene_name <- gene.names
zscores.o.kim <- zscores.o.kim %>% select(gene_name, everything())
# check the z-score transformed dataset
zscores.o.kim %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_kim_DD_zscores", zscores.o.kim)
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>%
write.csv(.,
file = "./results/normalized_gene_exp/zscore/ophio_kim/ophio_kim_DD_zscores_noNAs.csv")
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>%
write.csv(.,
file = "./results/normalized_gene_exp/zscore/ophio_kim/ophio_kim_DD_zscores_noNAs.csv",
row.names = F)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# 1. TC6_fungal_data.db
# Desc: This database will contain all fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_expressed_genes
# b. ophio_cflo_fpkm
# c. ophio_cflo_log2fpkm
# d. ophio_cflo_zscores
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
#
## Path to save files ------
# for supplementary files
supp.path="~/University\ of\ Central\ Florida/Charissa\ De\ Bekker\ -\ Ant-Fungus-Clock-Interactions/04_manuscript/03_supplementary_files/"
# 1. TC6_fungal_ejtk.db
# Desc: This database will contain all ejtk-output for fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_zscores_24h
# b. ophio_cflo_zscores_12h
# c. ophio_cflo_zscores_08h
# d.
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(my.db)
#      file = "./data/rdata/rhythmic_genes/ophio_kim_rhy_genes_gammap_05.RData")
# #
# ##
## End.
#
#
## z-score >> eJTK ------------------------
#
## Light-Dark cycle
## Period = 24h
ophio.kim.ld.24.zscore <- read.csv("./results/ejtk_output/ophio_kim/ld/from_zscore/ophio_kim_LD_zscores_noNAs_cos24_ph0020by4_as0420by4_jtkout_GammaP.txt",
sep = "\t", header = T, stringsAsFactors = F)
ophio.kim.ld.24.zscore %>%
head()
#
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", ophio.kim.ld.24.zscore)
#
#
## Dark-Dark
## Period = 24h
ophio.kim.dd.24.zscore <- read.csv("./results/ejtk_output/ophio_kim/dd/from_zscore/ophio_kim_DD_zscores_noNAs_cos24_ph0020by4_as0420by4_jtkout_GammaP.txt",
sep = "\t", header = T, stringsAsFactors = F)
ophio.kim.dd.24.zscore %>%
head()
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
head()
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", .)
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", ., overwrite=T)
ophio.kim.dd.24.zscore %>%
head()
ophio.kim.dd.24.zscore %>%
mutate(experiment="dark-dark") %>% head()
ophio.kim.dd.24.zscore %>%
mutate(experiment="dark-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_DD_zscores_24h", .)
src_dbi(my.db)
ls
ls
as.Date.POSIXct(8:15:19)
getwd
getwd()
getwd()
R()
--version
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
#
## Path to save files
# for supplementary files
supp.path="~/University\ of\ Central\ Florida/Charissa\ De\ Bekker\ -\ Ant-Fungus-Clock-Interactions/04_manuscript/03_supplementary_files/"
# 00. Databases -----------------------------------------------------------
#
# 1. TC6_fungal_ejtk.db
# Desc: This database will contain all ejtk-output for fungal expression data collected for TC6
ejtk.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(ejtk.db)
#
# 2. TC6_fungal_data.db
data.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(data.db)
# A1: genes that have NO expression (FPKM == 0 at all time points)
not.expressed <-
tbl(data.db, "ophio_cflo_fpkm") %>%
collect() %>% #nrow()
filter_at(vars(starts_with("Z")), all_vars(. == 0)) %>%
pull(gene_name)
# A2: run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "all") # enrichment against all ophio_cflo genes in the genome
# B: genes that are expressed (FPKM > 1 for at least one time point)
expressed <-
tbl(data.db, "ophio_cflo_expressed_genes") %>%
filter(expressed=="yes") %>%
collect() %>%
pull(gene_name)
# A1. number of 24h-rhythmic genes at GammaP < 0.05
rhy.24 <- tbl(ejtk.db, "ophio_cflo_zscores_24h") %>% filter(GammaP < gamma.pval) %>% collect()
## load zscore datasets
rhy.24 <- tbl(ejtk.db, "ophio_cflo_zscores_24h") %>% filter(GammaP < gamma.pval) %>% collect()
rhy.24 %>% head()
data.db %>% src_dbi
## load zscore datasets
zscore.24h <- data.db %>% tbl(., "ophio_cflo_zscores") %>% collect()
zscore.24h %>% head()
# A1. number of 24h-rhythmic genes at GammaP < 0.05
ejtk.24 <- tbl(ejtk.db, "ophio_cflo_zscores_24h") %>% filter(GammaP < gamma.pval) %>% collect()
ejtk.db %>% src_dbi
## Load all the rhythmic genesets
## Note, ordered according to their p-value; highly rhythmic at the top.
# Circadian genes (period = 24h)
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>% head()
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
# get the gene-names for sig. 24h-rhythmic genes
rhy.24 <-
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
filter(GammaP < gamma.pval) %>%
select(gene_name, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(gene_name) %>% pull()
# get the gene-names for sig. 24h-rhythmic genes
rhy.24 <-
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# Ultradian genes (period = 8h)
tbl(ejtk.db, "ophio_cflo_zscores_08h") %>% head()
## Foragers
rhy.8 <-
tbl(ejtk.db, "ophio_cflo_zscores_08h") %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
# Ultradian genes (period = 12h)
tbl(ejtk.db, "ophio_cflo_zscores_12h") %>% head()
## Foragers
rhy.12 <-
tbl(ejtk.db, "ophio_cflo_zscores_12h") %>%
filter(GammaP < gamma.pval) %>%
select(ID, GammaP) %>% collect() %>% arrange(GammaP) %>%
select(ID) %>% pull()
rm(rhy.12)
rm(rhy.8)
# Filter the zscores to keep only circadian genes
# zscore.24h <-
zscore.24h %>% head()
# Filter the zscores to keep only circadian genes
zscore.24h <-
zscore.24h %>%
filter(gene_name %in% rhy.24)
# Set genes as rownames and convert it into a matrix
rownames(zscore.24h) = zscore.24h$gene_name
# Filter the zscores to keep only circadian genes
zscore.24h <-
zscore.24h %>%
filter(gene_name %in% rhy.24) %>%
as.data.frame()
# Set genes as rownames and convert it into a matrix
rownames(zscore.24h) = zscore.24h$gene_name
zscore.24h <- as.matrix(zscore.24h[-1])
# Hierarchical clustering of the for24 and nur24 genesets
my_hclust_gene <- hclust(dist(zscore.24h), method = "complete")
# Make annotations for the heatmaps
my_gene_col.for <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # four clusters
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
View(my_sample_col)
# I’ll add some column annotations and create the heatmap.
# Annotations for:
# 1. Is the sample collected during the light or dark phase?
my_sample_col <- data.frame(phase = rep(c("light", "dark", "light"), c(5,6,1)))
row.names(my_sample_col) <- colnames(zscore.24h)
# Manual color palette
my_colour = list(
phase = c(light = "#F2E205", dark = "#010440"),
cluster = viridis::cividis(100)[c(10,90,60,30)])
# Color scale
my.breaks = seq(-3, max(zscore.24h), by=0.06)
rm(my_gene_col.for)
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # four clusters
pheatmap(zscore.24h, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col[,c("cluster")],
annotation_col = my_sample_col,
cutree_rows = 4,
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
# Make annotations for the heatmaps
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4) # four clusters
my_gene_col <- data.frame(cluster = my_gene_col)
source('~/Documents/GitHub/Das_et_al_2022a/scripts/R_scripts/02_ophio_cflo/01_general_patterns_of_gene_exp.R', echo=TRUE)
# Let's plot!
# rhy.heat <-
pheatmap(zscore.24h, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col[,c("cluster")],
annotation_col = my_sample_col,
cutree_rows = 4,
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
my_gene_col[,c("cluster")]
# Let's plot!
# rhy.heat <-
pheatmap(zscore.24h, show_rownames = F, show_colnames = F,
annotation_row = my_gene_col,
annotation_col = my_sample_col,
cutree_rows = 4,
cutree_cols = 2,
annotation_colors = my_colour,
border_color=FALSE,
cluster_cols = F,
breaks = my.breaks,
## color scheme borrowed from:
color = inferno(length(my.breaks) - 1),
# treeheight_row = 0,
# treeheight_col = 0,
# remove the color scale or not
# main = paste0("Foragers - circadian genes \n (n=", nrow(cflo.rhy.exp.for), " genes)"),
## annotation legend
annotation_legend = T,
## Color scale
legend = T)
## day-peaking | cluster 3 ##
# rhy.24.daypeaking.cluster3 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>% head()
## day-peaking | cluster 3 ##
rhy.24.daypeaking.cluster3 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 3) %>%
pull(gene) %>%
# run enrichment analysis
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed") # enrichment against all expressed ophio_cflo genes
# view the results
rhy.24.daypeaking.cluster3 %>% view()
## night-peaking | cluster 1 ##
rhy.24.nightpeaking.cluster1 <-
my_gene_col %>%
rownames_to_column(var = "gene") %>%
filter(cluster == 1) %>%
pull(gene) %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
12+20+12.93+490+18+10+92
# view the results
rhy.24.nightpeaking.cluster3 %>% view()
# view the results
rhy.24.nightpeaking.cluster1 %>% view()
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# e. ophio_kim_DD_expressed_genes
# f. ophio_kim_DD_fpkm
# g. ophio_kim_DD_log2fpkm
# h. ophio_kim_DD_zscores
# i. ophio_kim_expressed_genes
# j. ophio_kim_fpkm
# k. ophio_kim_log2fpkm
# l. ophio_kim_zscores
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
# # 01. Ophio_cflo ----------------------------------------------------------
#
# o.cflo <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_cflo/normalized_gene_exp_ophio_cflo_all_samples.csv",
#                    header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# # # Save file to database
# # dbWriteTable(my.db, "ophio_cflo_fpkm", o.cflo)
#
tbl(my.db,
"ophio_cflo_fkpm") %>%
head()
head(tbl(my.db,
"ophio_cflo_fpkm"))
# # 01. Ophio_cflo ----------------------------------------------------------
#
# o.cflo <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_cflo/normalized_gene_exp_ophio_cflo_all_samples.csv",
#                    header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# # # Save file to database
# # dbWriteTable(my.db, "ophio_cflo_fpkm", o.cflo)
#
tbl(my.db,
"ophio_cflo_fpkm") %>%
head()
# # 01. Ophio_cflo ----------------------------------------------------------
#
# o.cflo <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_cflo/normalized_gene_exp_ophio_cflo_all_samples.csv",
#                    header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# # # Save file to database
# # dbWriteTable(my.db, "ophio_cflo_fpkm", o.cflo)
#
tbl(my.db,
"ophio_cflo_expressed_genes") %>%
# filter()
head()
?dbWriteTable
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
View(go_enrichment)
# Absolute path to the data
path_to_data = "/Users/biplabendudas/Documents/GitHub/Das_et_al_2022a/results/normalized_gene_exp/ophio_cflo/"
# load libraries
library(data.table)
library(tidyverse)
# list all the normalized_gene_exp files (n = 12; Ophio_cflo)
data_all=list.files(path = path_to_data,
pattern='*.txt')
