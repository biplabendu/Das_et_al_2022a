o.cflo %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# log2-transform the data
expressed.o.cflo %>% head()
# log2-transform the data
o.cflo %>% head()
# log2-transform the data
o.cflo %>% select(-1) %>%
head()
# log2-transform the data
gene.names <- o.cflo[1]
log2.o.cflo <- log2(o.cflo[-1] + 1)
log2.o.cflo$gene_name <- gene.names
log2.o.cflo <- log2.o.cflo %>% select(gene_name, everything())
log2.o.cflo %>% head()
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1)
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1) %>%
as.matrix()
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1) %>%
as.matrix() %>%
apply(., 2, scale)
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1) %>%
as.matrix() %>%
apply(., 1, scale)
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1) %>%
as.matrix() %>%
apply(., 1, scale) %>%
t()
log2.o.cflo %>%
select(-1) %>%
head(1)
# z-score the data
log2.o.cflo %>%
select(-1) %>%
head(1) %>%
# as.matrix() %>%
apply(., 1, scale) %>%
t()
# z-score the data
foo <- log2.o.cflo %>%
select(-1) %>%
head(1)
foo
mean(foo)
as.matrix()
# z-score the data
foo <- log2.o.cflo %>%
select(-1) %>%
head(1) %>%
as.matrix()
foo
mean(foo)
sd(foo)
foo %>%
apply(., 1, scale) %>%
t()
foo[1]
(foo[1]-mean(foo))/sd(foo)
(foo[2]-mean(foo))/sd(foo)
# z-score the data
foo <- log2.o.cflo %>%
select(-1) %>%
head(2) %>%
as.matrix()
foo %>%
apply(., 1, scale) %>%
t()
foo
foo[1]
foo[1,]
foo[2,]
foo[2,]
(foo[2,1]-mean(foo[2,]))/sd(foo[2,])
foo %>%
apply(., 1, scale) %>%
t()
?Scale
?scale
?apply
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
dim()
?t
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
head()
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
column_to_rownames(gene_name) %>%
as.matrix() %>% head()
?column_to_rownames
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
column_to_rownames("gene_name") %>%
as.matrix() %>% head()
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
column_to_rownames(., var="gene_name") %>%
as.matrix() %>% head()
# z-score the data
log2.o.cflo %>% head()
# create a gene x exp matrix
column_to_rownames(.data = ., var = "gene_name") %>%
as.matrix() %>% head()
# z-score the data
log2.o.cflo %>%
# create a gene x exp matrix
column_to_rownames(.data = ., var = "gene_name") %>%
as.matrix() %>% head()
# z-score the data
gene.names <- log2.o.cflo[1]
log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make the dataframe and add the gene names
as.data.frame() %>%
mutate(gene_name = gene.names) %>%
select(gene_name, everything()) %>%
head()
log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make the dataframe and add the gene names
as.data.frame() %>% head()
log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make the dataframe and add the gene names
as.data.frame() %>% head()
col.names <- names(log2.o.cflo[-1])
zscores.o.cflo <- log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
rm(col.names)
# z-score the data
gene.names <- log2.o.cflo[1]
sample.names <- names(log2.o.cflo[-1])
zscores.o.cflo <- log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.cflo) <- sample.names
zscores.o.cflo <- zscores.o.cflo %>%
mutate(gene_name = gene.names) %>%
select(gene_name, everything())
# z-score the data
gene.names <- log2.o.cflo %>% pull(gene_name)
sample.names <- names(log2.o.cflo[-1])
zscores.o.cflo <- log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.cflo) <- sample.names
zscores.o.cflo <- zscores.o.cflo %>%
mutate(gene_name = gene.names) %>%
select(gene_name, everything())
# z-score the data
gene.names <- log2.o.cflo %>% pull(gene_name)
# z-score the data
gene.names <- log2.o.cflo %>% pluck(gene_name)
log2.o.cflo %>% pull(gene_name) %>% class()
# z-score the data
gene.names <- log2.o.cflo[1, drop=T]
# z-score the data
gene.names <- log2.o.cflo[1, ,drop=T]
head(log2.o.cflo)
str(log2.o.cflo)
# z-score the data
gene.names <- log2.o.cflo %>% pull(gene_name)
?pull
# check the log2-transformed data
log2.o.cflo %>% head()
log2.o.cflo$gene_name <- gene.names
zscores.o.cflo <- zscores.o.cflo %>%
select(gene_name, everything())
zscores.o.cflo$gene_name <- gene.names
zscores.o.cflo <- zscores.o.cflo %>%
select(gene_name, everything())
# z-score the data
gene.names <- log2.o.cflo[,1,drop=T]
# z-score the data
gene.names <- log2.o.cflo[,1,drop=F]
o.cflo %>% pull(gene_name) %>% class()
zscores.o.cflo %>% pull(gene_name) %>% class()
class(zscores.o.cflo)
class(o.cflo)
rm(gene.names)
# z-score the data
gene.names <- log2.o.cflo[,1,drop=T]
rm(gene.names)
# z-score the data
gene.names <- log2.o.cflo[1]
# check the z-score transformed dataset
zscores.o.cflo %>% head()
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
src_dbi(my.db)
o.cflo %>% head()
# Write the file to database
dbWriteTable(my.db, "ophio_cflo_fpkm", o.cflo)
src_dbi(my.db)
# Save file to databse
dbWriteTable(my.db, "ophio_cflo_expressed_genes", expressed.o.cflo)
src_dbi(my.db)
# Save file to databse
dbWriteTable(my.db, "ophio_cflo_expressed_genes", expressed.o.cflo %>% as.data.frame())
src_dbi(my.db)
tbl(my.db, "ophio_cflo_expressed_genes")
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect() %>% class()
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect() %>%
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect()
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect() %>% pluck()
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect() %>% as.character()
tbl(my.db, "ophio_cflo_expressed_genes") %>% collect() %>% as.array()
dbRemoveTable(my.db, "ophio_cflo_expressed_genes")
src_dbi(my.db)
# append this information to the o.cflo data
# expressed.o.cflo <-
o.cflo %>%
mutate(expressed = ifelse(gene_name %in% expressed.o.cflo,"yes","no")) %>%
head()
# append this information to the o.cflo data
# expressed.o.cflo <-
o.cflo %>%
mutate(expressed = ifelse(gene_name %in% expressed.o.cflo,"yes","no")) %>%
filter(expressed=="yes") %>% nrow()
# append this information to the o.cflo data
expressed.o.cflo <-
o.cflo %>%
mutate(expressed = ifelse(gene_name %in% expressed.o.cflo,"yes","no"))
# Save file to databse
dbWriteTable(my.db, "ophio_cflo_expressed_genes", expressed.o.cflo)
# check the log2-transformed data
log2.o.cflo %>% head()
# Expressed genes ---------------------------------------------------------
# list of all ophio_cflo "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
o.cflo %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.cflo[1]
log2.o.cflo <- log2(o.cflo[-1] + 1)
log2.o.cflo$gene_name <- gene.names
log2.o.cflo <-
log2.o.cflo %>%
select(gene_name, everything()) %>%
mutate(expressed = ifelse(gene_name %in% expressed,"yes","no"))
# check the log2-transformed data
log2.o.cflo %>% head()
expressed.o.cflo %>% head()
ifelse(gene_name %in% expressed,"yes","no")
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.cflo[1]
log2.o.cflo <- log2(o.cflo[-1] + 1)
log2.o.cflo$gene_name <- gene.names
log2.o.cflo <- log2.o.cflo %>% select(gene_name, everything())
# check the log2-transformed data
log2.o.cflo %>% head()
src_dbi(my.db)
# Save file to database
dbWriteTable(my.db, "ophio_cflo_log2transformed", log2.o.cflo)
src_dbi(my.db)
# check the log2-transformed data
log2.o.cflo %>% class()
# Save file to database
dbWriteTable(my.db, "ophio_cflo_log2transformed", log2.o.cflo)
# Save file to database
dbWriteTable(my.db, "ophio_cflo_logtransformed", log2.o.cflo)
# Save file to database
dbWriteTable(my.db, "ophio_cflo_log2fpkm", log2.o.cflo)
# check the log2-transformed data
log2.o.cflo %>% head()
# Save file to database
dbWriteTable(my.db, "absc", log2.o.cflo)
# zscore-log2-expression --------------------------------------------------
# z-score the data
gene.names <- log2.o.cflo[1]
sample.names <- names(log2.o.cflo[-1])
zscores.o.cflo <- log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.cflo) <- sample.names
zscores.o.cflo$gene_name <- gene.names
zscores.o.cflo <- zscores.o.cflo %>% select(gene_name, everything())
# check the z-score transformed dataset
zscores.o.cflo %>% head()
# Save file to database
dbWriteTable(my.db, "ophio_cflo_zscores", zscores.o.cflo)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# 1. TC6_fungal_data.db
# Desc: This database will contain all fungal expression data collected for TC6
### Contents -
# a. Ophio_cflo raw fpkm
# b. Ophio_cflo raw fpkm + expressed (yes/no)
# c.
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
o.cflo <- read.csv("./results/normalized_gene_exp/ophio_cflo/normalized_gene_exp_ophio_cflo_all_samples.csv",
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# list of all ophio_cflo genes
all.o.cflo <- o.cflo %>% pull(gene_name) %>% unique()
# Expressed genes ---------------------------------------------------------
# list of all ophio_cflo "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
o.cflo %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# append this information to the o.cflo data
expressed.o.cflo <-
o.cflo %>%
mutate(expressed = ifelse(gene_name %in% expressed,"yes","no"))
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.cflo[1]
log2.o.cflo <- log2(o.cflo[-1] + 1)
log2.o.cflo$gene_name <- gene.names
log2.o.cflo <- log2.o.cflo %>% select(gene_name, everything())
# check the log2-transformed data
log2.o.cflo %>% head()
# Save file to database
dbWriteTable(my.db, "absc", log2.o.cflo)
str(log2.o.cflo)
str(o.cflo)
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.cflo %>% pull(gene_name)
log2.o.cflo <- log2(o.cflo[-1] + 1)
log2.o.cflo$gene_name <- gene.names
log2.o.cflo <- log2.o.cflo %>% select(gene_name, everything())
# check the log2-transformed data
log2.o.cflo %>% head()
# check the log2-transformed data
log2.o.cflo %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_cflo_log2fpkm", log2.o.cflo)
# zscore-log2-expression --------------------------------------------------
# z-score the data
gene.names <- log2.o.cflo %>% pull(gene_name)
sample.names <- names(log2.o.cflo[-1])
zscores.o.cflo <- log2.o.cflo %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.cflo) <- sample.names
zscores.o.cflo$gene_name <- gene.names
zscores.o.cflo <- zscores.o.cflo %>% select(gene_name, everything())
# check the z-score transformed dataset
zscores.o.cflo %>% head()
# check the z-score transformed dataset
zscores.o.cflo %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_cflo_zscores", zscores.o.cflo)
src_dbi(my.db)
# Expressed genes ---------------------------------------------------------
# list of all ophio_cflo "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
o.cflo %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# append this information to the o.cflo data
expressed.o.cflo <-
o.cflo %>%
select(gene_name) %>%
mutate(expressed = ifelse(gene_name %in% expressed,"yes","no"))
# Save file to databse
dbWriteTable(my.db, "ophio_cflo_expressed_genes", expressed.o.cflo)
# Save file to databse
dbWriteTable(my.db, "ophio_cflo_expressed_genes", expressed.o.cflo, overwrite=T)
tbl(my.db, "ophio_cflo_expressed_genes")
tbl(my.db, "ophio_cflo_expressed_genes") %>% filter(expressed!="yes") %>% tail()
tbl(my.db, "ophio_cflo_expressed_genes") %>% filter(expressed!="yes") %>% collect() %>% tail()
tbl(my.db, "ophio_cflo_expressed_genes") %>% filter(expressed!="yes") %>% collect() %>% head()
tbl(my.db, "ophio_cflo_expressed_genes") %>% filter(expressed!="yes") %>% collect() %>% nrow()
rm(list = ls())
