View(go_enrichment)
tbl(data.db, "ophio_cflo_expressed_genes") %>% filter(expressed=="yes") %>% collect() %>% pull(gene_name)
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = tbl(data.db, "ophio_cflo_expressed_genes") %>%
filter(expressed=="yes") %>% collect() %>% pull(gene_name))
View(go_enrichment)
return(ifelse(gamma.pval==0.5, "yay", "nay"))
return(ifelse(gamma.pval==0.5, "yay", "nay"))
(ifelse(gamma.pval==0.5, "yay", "nay"))
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo")
View(go_enrichment)
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo") %>% view()
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo") %>% view()
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = tbl(data.db, "ophio_cflo_expressed_genes") %>%
filter(expressed=="yes") %>% collect() %>% pull(gene_name))
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = tbl(data.db, "ophio_cflo_expressed_genes") %>%
filter(expressed=="yes") %>% collect() %>% pull(gene_name))
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "expressed")
#
## load functions ---------
source("./functions/enrichment_analysis.R")
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "all") %>% view()
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "all") %>% select(GO, GO_desc, adj_pVal, n_GO_DEG, n_GO, gene_name) %>% view()
# run enrichment
not.expressed %>%
go_enrichment(.,
org = "ophio_cflo",
bg = "all") %>% select(GO, GO_desc, adj_pVal, n_GO_DEG, n_GO, gene_name) %>% head(15)
# genes that are not expressed (FPKM == 0 at all time points)
# not.expressed <-
tbl(data.db, "ophio_cflo_fpkm") %>%
collect() %>% nrow()
# genes that are expressed (FPKM > 1 for at least one time point)
expressed <-
tbl(data.db, "ophio_cflo_expressed_genes") %>%
filter(expressed=="yes") %>%
collect() %>%
pull(gene_name)
length(expressed)/7455
src_dbi(ejtk.db)
# A1. number of 24h-rhythmic genes at GammaP < 0.05
rhy.24 <- tbl(ejtk.db, "ophio_cflo_zscores_24h") %>% filter(GammaP < gamma.pval) %>% collect()
2381/6998
rhy.24 %>% head()
#
## Path to save files
# for supplementary files
supp.path="~/University\ of\ Central\ Florida/Charissa\ De\ Bekker\ -\ Ant-Fungus-Clock-Interactions/04_manuscript/03_supplementary_files/"
# A2. save the ejtk-results as a supplementary file
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
collect() %>%
write.csv(.,
file = paste0(supp.path,"ejtk_24h_ophio_cflo_all_genes.csv"),
row.names = F)
# A3. save the ejtk-results (rhy24 genes only) as a supplementary file
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
filter(GammaP < gamma.pval) %>%
collect() %>%
write.csv(.,
file = paste0(supp.path,"ejtk_24h_ophio_cflo_rhy_genes.csv"),
row.names = F)
# A2. save the ejtk-results (ALL GENES) as a supplementary file
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
collect() %>%
write.csv(.,
file = paste0(supp.path,"S1_ejtk_24h_ophio_cflo_all_genes.csv"),
row.names = F)
# A3. save the ejtk-results (rhy24 genes only) as a supplementary file
tbl(ejtk.db, "ophio_cflo_zscores_24h") %>%
filter(GammaP < gamma.pval) %>%
collect() %>%
write.csv(.,
file = paste0(supp.path,"S2_ejtk_24h_ophio_cflo_rhy_genes.csv"),
row.names = F)
rhy.24 %>% pull(gene_name) %>% go_enrichment(., org = "ophio-cflo", bg="expressed")
rhy.24 %>% pull(ID) %>% go_enrichment(., org = "ophio-cflo", bg="expressed")
rhy.24 %>% pull(ID) %>% go_enrichment(., org = "ophio_cflo", bg="expressed")
rhy.24 %>% pull(ID) %>% go_enrichment(., org = "ophio_cflo", bg="expressed") %>% view()
o.kim <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_kim/ld/normalized_gene_exp_ophio_kim_ld_samples.csv",
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
rm(list = ls)
rm(list = ls())
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# 1. TC6_fungal_data.db
# Desc: This database will contain all fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_expressed_genes
# b. ophio_cflo_fpkm
# c. ophio_cflo_log2fpkm
# d. ophio_cflo_zscores
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
o.kim <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_kim/ld/normalized_gene_exp_ophio_kim_ld_samples.csv",
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
o.kim %>% head()
# Expressed genes ---------------------------------------------------------
# list of all ophio_cflo "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
o.kim %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# append this information to the o.kim data
expressed.o.kim <-
o.kim %>%
select(gene_name) %>%
mutate(expressed = ifelse(gene_name %in% expressed,"yes","no"))
length(expressed)/nrow(expressed.o.kim)
# Save file to database
dbWriteTable(my.db, "ophio_kim_fpkm", o.kim)
# Save file to databse
dbWriteTable(my.db, "ophio_kim_expressed_genes", expressed.o.kim)
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.kim %>% pull(gene_name)
log2.o.kim <- log2(o.kim[-1] + 1)
log2.o.kim$gene_name <- gene.names
log2.o.kim <- log2.o.kim %>% select(gene_name, everything())
# check the log2-transformed data
log2.o.kim %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_kim_log2fpkm", log2.o.kim)
# zscore-log2-expression --------------------------------------------------
# z-score the data
gene.names <- log2.o.kim %>% pull(gene_name)
sample.names <- names(log2.o.kim[-1])
zscores.o.kim <- log2.o.kim %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.kim) <- sample.names
zscores.o.kim$gene_name <- gene.names
zscores.o.kim <- zscores.o.kim %>% select(gene_name, everything())
# check the z-score transformed dataset
zscores.o.kim %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_kim_zscores", zscores.o.kim)
# Save a csv with the zscores
tbl(my.db, "ophio_kim_zscores") %>%
collect() %>%
head()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_zscores") %>%
collect() %>%
na.omit() %>%
head()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_zscores") %>%
collect() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_zscores") %>%
collect() %>%
na.omit() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_zscores") %>%
collect() %>%
na.omit() %>%
write.csv(.,
file = "./results/normalized_gene_exp/zscore/ophio_kim/ophio_kim_LD_zscores_noNAs.csv")
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# 1. TC6_fungal_data.db
# Desc: This database will contain all fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_expressed_genes
# b. ophio_cflo_fpkm
# c. ophio_cflo_log2fpkm
# d. ophio_cflo_zscores
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
o.kim <- read.csv("./results/normalized_gene_exp/raw_fpkm/ophio_kim/dd/normalized_gene_exp_ophio_kim_dd_samples.csv",
header = T, stringsAsFactors = F, na.strings = c(NA, "", " "))
# Save file to database
dbWriteTable(my.db, "ophio_kim_fpkm", o.kim)
# Save file to database
dbWriteTable(my.db, "ophio_kim_DD_fpkm", o.kim)
# Expressed genes ---------------------------------------------------------
# list of all ophio_cflo "Expressed" genes (>1 FPKM during the 24h period)
expressed <-
o.kim %>%
na.omit() %>%
filter_at(vars(starts_with("Z")), any_vars(. > 1)) %>%
pull(gene_name) %>%
unique()
# append this information to the o.kim data
expressed.o.kim <-
o.kim %>%
select(gene_name) %>%
mutate(expressed = ifelse(gene_name %in% expressed,"yes","no"))
# Save file to databse
dbWriteTable(my.db, "ophio_kim_DD_expressed_genes", expressed.o.kim)
# log2-expression --------------------------------------------------------
# log2-transform the data
gene.names <- o.kim %>% pull(gene_name)
log2.o.kim <- log2(o.kim[-1] + 1)
log2.o.kim$gene_name <- gene.names
log2.o.kim <- log2.o.kim %>% select(gene_name, everything())
# check the log2-transformed data
log2.o.kim %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_kim_DD_log2fpkm", log2.o.kim)
# zscore-log2-expression --------------------------------------------------
# z-score the data
gene.names <- log2.o.kim %>% pull(gene_name)
sample.names <- names(log2.o.kim[-1])
zscores.o.kim <- log2.o.kim %>%
# create a gene x exp matrix
select(-1) %>%
as.matrix() %>%
# use the scale function for each row to calculate z-scores
# scale calculates (x-mean(X))/sd(X)
# 1 indicates row-wise
apply(., 1, scale) %>%
# the output needs to be transposed
t() %>%
# make it a dataframe
as.data.frame()
# add the column names
names(zscores.o.kim) <- sample.names
zscores.o.kim$gene_name <- gene.names
zscores.o.kim <- zscores.o.kim %>% select(gene_name, everything())
# check the z-score transformed dataset
zscores.o.kim %>% str()
# Save file to database
dbWriteTable(my.db, "ophio_kim_DD_zscores", zscores.o.kim)
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>% nrow()
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>%
write.csv(.,
file = "./results/normalized_gene_exp/zscore/ophio_kim/ophio_kim_DD_zscores_noNAs.csv")
# Save a csv with the zscores
tbl(my.db, "ophio_kim_DD_zscores") %>%
collect() %>%
na.omit() %>%
write.csv(.,
file = "./results/normalized_gene_exp/zscore/ophio_kim/ophio_kim_DD_zscores_noNAs.csv",
row.names = F)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
# 1. TC6_fungal_data.db
# Desc: This database will contain all fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_expressed_genes
# b. ophio_cflo_fpkm
# c. ophio_cflo_log2fpkm
# d. ophio_cflo_zscores
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_data.db")
# which tables are in the database
src_dbi(my.db)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
# Housekeeping ---------------------------------------------------------------
#
set.seed(420)
rm(list = ls())
#
## Load packages ----------
pacman::p_load(pheatmap, dendextend, tidyverse, viridis)
pacman::p_load(RSQLite, tidyverse, dbplyr, DT, conflicted)
#
# set conflict preference (housekeeping to make sure functions work as expected)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("layout", "plotly")
#
## set parameters and thresholds --------
#
# gamma-pvalue threshold for inferring rhythmicity
gamma.pval = 0.05
#
## Path to save files ------
# for supplementary files
supp.path="~/University\ of\ Central\ Florida/Charissa\ De\ Bekker\ -\ Ant-Fungus-Clock-Interactions/04_manuscript/03_supplementary_files/"
# 1. TC6_fungal_ejtk.db
# Desc: This database will contain all ejtk-output for fungal expression data collected for TC6
### Contents -
# a. ophio_cflo_zscores_24h
# b. ophio_cflo_zscores_12h
# c. ophio_cflo_zscores_08h
# d.
#
# Load the data
my.db <- dbConnect(RSQLite::SQLite(),
"./data/databases/TC6_fungal_ejtk.db")
# which tables are in the database
src_dbi(my.db)
#      file = "./data/rdata/rhythmic_genes/ophio_kim_rhy_genes_gammap_05.RData")
# #
# ##
## End.
#
#
## z-score >> eJTK ------------------------
#
## Light-Dark cycle
## Period = 24h
ophio.kim.ld.24.zscore <- read.csv("./results/ejtk_output/ophio_kim/ld/from_zscore/ophio_kim_LD_zscores_noNAs_cos24_ph0020by4_as0420by4_jtkout_GammaP.txt",
sep = "\t", header = T, stringsAsFactors = F)
ophio.kim.ld.24.zscore %>%
head()
#
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", ophio.kim.ld.24.zscore)
#
#
## Dark-Dark
## Period = 24h
ophio.kim.dd.24.zscore <- read.csv("./results/ejtk_output/ophio_kim/dd/from_zscore/ophio_kim_DD_zscores_noNAs_cos24_ph0020by4_as0420by4_jtkout_GammaP.txt",
sep = "\t", header = T, stringsAsFactors = F)
ophio.kim.dd.24.zscore %>%
head()
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
head()
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", .)
ophio.kim.ld.24.zscore %>%
mutate(experiment="light-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_LD_zscores_24h", ., overwrite=T)
ophio.kim.dd.24.zscore %>%
head()
ophio.kim.dd.24.zscore %>%
mutate(experiment="dark-dark") %>% head()
ophio.kim.dd.24.zscore %>%
mutate(experiment="dark-dark") %>%
# save file to database
dbWriteTable(my.db, "ophio_kim_DD_zscores_24h", .)
src_dbi(my.db)
ls
ls
as.Date.POSIXct(8:15:19)
getwd
getwd()
